package app

// Code generated by go generate; DO NOT EDIT.

import (
	"fmt"
	"strings"
)

// HTMLA is the interface that describes a <a> HTML element.
type HTMLA interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLA

	// Body set the content of the element.
	Body(v ...UI) HTMLA

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLA

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLA

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLA

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLA

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLA

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLA

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLA

	// Download specifies that the target will be downloaded when a user clicks on the hyperlink.
	Download(v string) HTMLA

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLA

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLA

	// Href specifies the URL of the page the link goes to.
	Href(v string) HTMLA

	// HrefLang specifies the language of the linked document.
	HrefLang(v string) HTMLA

	// ID specifies a unique id for an element.
	ID(v string) HTMLA

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLA

	// Media specifies what media/device the linked document is optimized for.
	Media(v string) HTMLA

	// Ping specifies a list of URLs to be notified if the user follows the hyperlink.
	Ping(v string) HTMLA

	// Rel specifies the relationship between the current document and the linked document.
	Rel(v string) HTMLA

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLA

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLA

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLA

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLA

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLA

	// Target specifies the target for where to open the linked document or where to submit the form.
	Target(v string) HTMLA

	// Title specifies extra information about an element.
	Title(v string) HTMLA

	// Type specifies the type of element.
	Type(v string) HTMLA

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLA

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLA

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLA

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLA

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLA

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLA

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLA

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLA

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLA

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLA

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLA

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLA

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLA

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLA

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLA

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLA

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLA

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLA

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLA

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLA

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLA

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLA

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLA

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLA

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLA

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLA

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLA

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLA

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLA

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLA

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLA

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLA

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLA
}

// A returns an HTML element that defines a hyperlink.
func A() HTMLA {
	return htmlElement[HTMLA]{
		tag:           "a",
		isSelfClosing: false,
	}
}

// HTMLAbbr is the interface that describes a <abbr> HTML element.
type HTMLAbbr interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLAbbr

	// Body set the content of the element.
	Body(v ...UI) HTMLAbbr

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLAbbr

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLAbbr

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLAbbr

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLAbbr

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLAbbr

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLAbbr

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLAbbr

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLAbbr

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLAbbr

	// ID specifies a unique id for an element.
	ID(v string) HTMLAbbr

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLAbbr

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLAbbr

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLAbbr

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLAbbr

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLAbbr

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLAbbr

	// Title specifies extra information about an element.
	Title(v string) HTMLAbbr

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLAbbr

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLAbbr

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLAbbr

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLAbbr

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLAbbr

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLAbbr

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLAbbr

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLAbbr

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLAbbr

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLAbbr

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLAbbr

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLAbbr

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLAbbr

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLAbbr

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLAbbr

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLAbbr

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLAbbr

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLAbbr

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLAbbr

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLAbbr

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLAbbr

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLAbbr

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLAbbr

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLAbbr

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLAbbr

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLAbbr

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLAbbr

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLAbbr

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLAbbr

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLAbbr

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLAbbr

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLAbbr

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLAbbr
}

// Abbr returns an HTML element that defines an abbreviation or an acronym.
func Abbr() HTMLAbbr {
	return htmlElement[HTMLAbbr]{
		tag:           "abbr",
		isSelfClosing: false,
	}
}

// HTMLAddress is the interface that describes a <address> HTML element.
type HTMLAddress interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLAddress

	// Body set the content of the element.
	Body(v ...UI) HTMLAddress

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLAddress

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLAddress

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLAddress

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLAddress

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLAddress

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLAddress

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLAddress

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLAddress

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLAddress

	// ID specifies a unique id for an element.
	ID(v string) HTMLAddress

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLAddress

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLAddress

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLAddress

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLAddress

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLAddress

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLAddress

	// Title specifies extra information about an element.
	Title(v string) HTMLAddress

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLAddress

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLAddress

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLAddress

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLAddress

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLAddress

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLAddress

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLAddress

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLAddress

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLAddress

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLAddress

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLAddress

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLAddress

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLAddress

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLAddress

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLAddress

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLAddress

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLAddress

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLAddress

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLAddress

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLAddress

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLAddress

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLAddress

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLAddress

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLAddress

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLAddress

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLAddress

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLAddress

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLAddress

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLAddress

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLAddress

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLAddress

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLAddress

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLAddress
}

// Address returns an HTML element that defines contact information for the author/owner of a document.
func Address() HTMLAddress {
	return htmlElement[HTMLAddress]{
		tag:           "address",
		isSelfClosing: false,
	}
}

// HTMLArea is the interface that describes a <area> HTML element.
type HTMLArea interface {
	UI

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLArea

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLArea

	// Alt specifies an alternate text when the original element fails to display.
	Alt(v string) HTMLArea

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLArea

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLArea

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLArea

	// Coords specifies the coordinates of the area.
	Coords(v string) HTMLArea

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLArea

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLArea

	// Download specifies that the target will be downloaded when a user clicks on the hyperlink.
	Download(v string) HTMLArea

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLArea

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLArea

	// Href specifies the URL of the page the link goes to.
	Href(v string) HTMLArea

	// HrefLang specifies the language of the linked document.
	HrefLang(v string) HTMLArea

	// ID specifies a unique id for an element.
	ID(v string) HTMLArea

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLArea

	// Media specifies what media/device the linked document is optimized for.
	Media(v string) HTMLArea

	// Rel specifies the relationship between the current document and the linked document.
	Rel(v string) HTMLArea

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLArea

	// Shape specifies the shape of the area.
	Shape(v string) HTMLArea

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLArea

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLArea

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLArea

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLArea

	// Target specifies the target for where to open the linked document or where to submit the form.
	Target(v string) HTMLArea

	// Title specifies extra information about an element.
	Title(v string) HTMLArea

	// Type specifies the type of element.
	Type(v string) HTMLArea

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLArea

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLArea

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLArea

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLArea

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLArea

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLArea

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLArea

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLArea

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLArea

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLArea

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLArea

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLArea

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLArea

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLArea

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLArea

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLArea

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLArea

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLArea

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLArea

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLArea

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLArea

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLArea

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLArea

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLArea

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLArea

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLArea

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLArea

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLArea

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLArea

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLArea

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLArea

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLArea

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLArea
}

// Area returns an HTML element that defines an area inside an image-map.
func Area() HTMLArea {
	return htmlElement[HTMLArea]{
		tag:           "area",
		isSelfClosing: true,
	}
}

// HTMLArticle is the interface that describes a <article> HTML element.
type HTMLArticle interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLArticle

	// Body set the content of the element.
	Body(v ...UI) HTMLArticle

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLArticle

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLArticle

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLArticle

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLArticle

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLArticle

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLArticle

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLArticle

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLArticle

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLArticle

	// ID specifies a unique id for an element.
	ID(v string) HTMLArticle

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLArticle

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLArticle

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLArticle

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLArticle

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLArticle

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLArticle

	// Title specifies extra information about an element.
	Title(v string) HTMLArticle

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLArticle

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLArticle

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLArticle

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLArticle

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLArticle

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLArticle

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLArticle

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLArticle

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLArticle

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLArticle

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLArticle

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLArticle

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLArticle

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLArticle

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLArticle

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLArticle

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLArticle

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLArticle

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLArticle

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLArticle

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLArticle

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLArticle

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLArticle

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLArticle

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLArticle

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLArticle

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLArticle

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLArticle

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLArticle

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLArticle

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLArticle

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLArticle

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLArticle
}

// Article returns an HTML element that defines an article.
func Article() HTMLArticle {
	return htmlElement[HTMLArticle]{
		tag:           "article",
		isSelfClosing: false,
	}
}

// HTMLAside is the interface that describes a <aside> HTML element.
type HTMLAside interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLAside

	// Body set the content of the element.
	Body(v ...UI) HTMLAside

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLAside

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLAside

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLAside

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLAside

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLAside

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLAside

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLAside

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLAside

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLAside

	// ID specifies a unique id for an element.
	ID(v string) HTMLAside

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLAside

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLAside

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLAside

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLAside

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLAside

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLAside

	// Title specifies extra information about an element.
	Title(v string) HTMLAside

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLAside

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLAside

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLAside

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLAside

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLAside

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLAside

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLAside

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLAside

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLAside

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLAside

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLAside

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLAside

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLAside

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLAside

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLAside

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLAside

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLAside

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLAside

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLAside

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLAside

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLAside

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLAside

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLAside

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLAside

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLAside

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLAside

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLAside

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLAside

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLAside

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLAside

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLAside

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLAside

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLAside
}

// Aside returns an HTML element that defines content aside from the page content.
func Aside() HTMLAside {
	return htmlElement[HTMLAside]{
		tag:           "aside",
		isSelfClosing: false,
	}
}

// HTMLAudio is the interface that describes a <audio> HTML element.
type HTMLAudio interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLAudio

	// Body set the content of the element.
	Body(v ...UI) HTMLAudio

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLAudio

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLAudio

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLAudio

	// AutoPlay specifies that the audio/video will start playing as soon as it is ready.
	AutoPlay(v bool) HTMLAudio

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLAudio

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLAudio

	// Controls specifies that audio/video controls should be displayed (such as a play/pause button etc).
	Controls(v bool) HTMLAudio

	// CrossOrigin sets the mode of the request to an HTTP CORS Request.
	CrossOrigin(v string) HTMLAudio

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLAudio

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLAudio

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLAudio

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLAudio

	// ID specifies a unique id for an element.
	ID(v string) HTMLAudio

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLAudio

	// Loop specifies that the audio/video will start over again, every time it is finished.
	Loop(v bool) HTMLAudio

	// Muted specifies that the audio output of the video should be muted.
	Muted(v bool) HTMLAudio

	// Preload specifies if and how the author thinks the audio/video should be loaded when the page loads.
	Preload(v string) HTMLAudio

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLAudio

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLAudio

	// Src specifies the URL of the media file.
	Src(v string) HTMLAudio

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLAudio

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLAudio

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLAudio

	// Title specifies extra information about an element.
	Title(v string) HTMLAudio

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLAudio

	// OnAbort calls the given handler on abort.
	OnAbort(h EventHandler, scope ...any) HTMLAudio

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLAudio

	// OnCanPlay calls the given handler when a file is ready to start playing (when it has buffered enough to begin).
	OnCanPlay(h EventHandler, scope ...any) HTMLAudio

	// OnCanPlayThrough calls the given handler when a file can be played all the way to the end without pausing for buffering.
	OnCanPlayThrough(h EventHandler, scope ...any) HTMLAudio

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLAudio

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLAudio

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLAudio

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLAudio

	// OnCueChange calls the given handler when the cue changes in a track element.
	OnCueChange(h EventHandler, scope ...any) HTMLAudio

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLAudio

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLAudio

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLAudio

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLAudio

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLAudio

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLAudio

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLAudio

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLAudio

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLAudio

	// OnDurationChange calls the given handler when the length of the media changes.
	OnDurationChange(h EventHandler, scope ...any) HTMLAudio

	// OnEmptied calls the given handler when something bad happens and the file is suddenly unavailable (like unexpectedly disconnects).
	OnEmptied(h EventHandler, scope ...any) HTMLAudio

	// OnEnded calls the given handler when the media has reach the end.
	OnEnded(h EventHandler, scope ...any) HTMLAudio

	// OnError calls the given handler when an error occurs.
	OnError(h EventHandler, scope ...any) HTMLAudio

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLAudio

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLAudio

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLAudio

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLAudio

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLAudio

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLAudio

	// OnLoadStart calls the given handler just as the file begins to load before anything is actually loaded.
	OnLoadStart(h EventHandler, scope ...any) HTMLAudio

	// OnLoadedData calls the given handler when media data is loaded.
	OnLoadedData(h EventHandler, scope ...any) HTMLAudio

	// OnLoadedMetaData calls the given handler when meta data (like dimensions and duration) are loaded.
	OnLoadedMetaData(h EventHandler, scope ...any) HTMLAudio

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLAudio

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLAudio

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLAudio

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLAudio

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLAudio

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLAudio

	// OnPause calls the given handler when the media is paused either by the user or programmatically.
	OnPause(h EventHandler, scope ...any) HTMLAudio

	// OnPlay calls the given handler when the media is ready to start playing.
	OnPlay(h EventHandler, scope ...any) HTMLAudio

	// OnPlaying calls the given handler when the media actually has started playing.
	OnPlaying(h EventHandler, scope ...any) HTMLAudio

	// OnProgress calls the given handler when the browser is in the process of getting the media data.
	OnProgress(h EventHandler, scope ...any) HTMLAudio

	// OnRateChange calls the given handler each time the playback rate changes (like when a user switches to a slow motion or fast forward mode).
	OnRateChange(h EventHandler, scope ...any) HTMLAudio

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLAudio

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLAudio

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLAudio

	// OnSeeked calls the given handler when the seeking attribute is set to false indicating that seeking has ended.
	OnSeeked(h EventHandler, scope ...any) HTMLAudio

	// OnSeeking calls the given handler when the seeking attribute is set to true indicating that seeking is active.
	OnSeeking(h EventHandler, scope ...any) HTMLAudio

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLAudio

	// OnStalled calls the given handler when the browser is unable to fetch the media data for whatever reason.
	OnStalled(h EventHandler, scope ...any) HTMLAudio

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLAudio

	// OnSuspend calls the given handler when fetching the media data is stopped before it is completely loaded for whatever reason.
	OnSuspend(h EventHandler, scope ...any) HTMLAudio

	// OnTimeUpdate calls the given handler when the playing position has changed (like when the user fast forwards to a different point in the media).
	OnTimeUpdate(h EventHandler, scope ...any) HTMLAudio

	// OnVolumeChange calls the given handler each time the volume is changed which (includes setting the volume to "mute").
	OnVolumeChange(h EventHandler, scope ...any) HTMLAudio

	// OnWaiting calls the given handler when the media has paused but is expected to resume (like when the media pauses to buffer more data).
	OnWaiting(h EventHandler, scope ...any) HTMLAudio

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLAudio
}

// Audio returns an HTML element that defines sound content.
func Audio() HTMLAudio {
	return htmlElement[HTMLAudio]{
		tag:           "audio",
		isSelfClosing: false,
	}
}

// HTMLB is the interface that describes a <b> HTML element.
type HTMLB interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLB

	// Body set the content of the element.
	Body(v ...UI) HTMLB

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLB

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLB

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLB

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLB

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLB

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLB

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLB

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLB

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLB

	// ID specifies a unique id for an element.
	ID(v string) HTMLB

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLB

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLB

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLB

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLB

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLB

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLB

	// Title specifies extra information about an element.
	Title(v string) HTMLB

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLB

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLB

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLB

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLB

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLB

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLB

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLB

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLB

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLB

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLB

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLB

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLB

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLB

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLB

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLB

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLB

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLB

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLB

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLB

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLB

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLB

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLB

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLB

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLB

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLB

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLB

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLB

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLB

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLB

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLB

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLB

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLB

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLB
}

// B returns an HTML element that defines bold text.
func B() HTMLB {
	return htmlElement[HTMLB]{
		tag:           "b",
		isSelfClosing: false,
	}
}

// HTMLBase is the interface that describes a <base> HTML element.
type HTMLBase interface {
	UI

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLBase

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLBase

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLBase

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLBase

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLBase

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLBase

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLBase

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLBase

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLBase

	// Href specifies the URL of the page the link goes to.
	Href(v string) HTMLBase

	// ID specifies a unique id for an element.
	ID(v string) HTMLBase

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLBase

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLBase

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLBase

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLBase

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLBase

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLBase

	// Target specifies the target for where to open the linked document or where to submit the form.
	Target(v string) HTMLBase

	// Title specifies extra information about an element.
	Title(v string) HTMLBase

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLBase

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLBase

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLBase

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLBase

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLBase

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLBase

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLBase

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLBase

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLBase

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLBase

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLBase

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLBase

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLBase

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLBase

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLBase

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLBase

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLBase

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLBase

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLBase

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLBase

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLBase

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLBase

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLBase

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLBase

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLBase

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLBase

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLBase

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLBase

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLBase

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLBase

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLBase

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLBase

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLBase
}

// Base returns an HTML element that specifies the base URL/target for all relative URLs in a document.
func Base() HTMLBase {
	return htmlElement[HTMLBase]{
		tag:           "base",
		isSelfClosing: true,
	}
}

// HTMLBdi is the interface that describes a <bdi> HTML element.
type HTMLBdi interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLBdi

	// Body set the content of the element.
	Body(v ...UI) HTMLBdi

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLBdi

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLBdi

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLBdi

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLBdi

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLBdi

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLBdi

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLBdi

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLBdi

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLBdi

	// ID specifies a unique id for an element.
	ID(v string) HTMLBdi

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLBdi

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLBdi

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLBdi

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLBdi

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLBdi

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLBdi

	// Title specifies extra information about an element.
	Title(v string) HTMLBdi

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLBdi

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLBdi

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLBdi

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLBdi

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLBdi

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLBdi

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLBdi

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLBdi

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLBdi

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLBdi

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLBdi

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLBdi

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLBdi

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLBdi

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLBdi

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLBdi

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLBdi

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLBdi

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLBdi

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLBdi

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLBdi

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLBdi

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLBdi

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLBdi

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLBdi

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLBdi

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLBdi

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLBdi

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLBdi

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLBdi

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLBdi

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLBdi

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLBdi
}

// Bdi returns an HTML element that isolates a part of text that might be formatted in a different direction from other text outside it.
func Bdi() HTMLBdi {
	return htmlElement[HTMLBdi]{
		tag:           "bdi",
		isSelfClosing: false,
	}
}

// HTMLBdo is the interface that describes a <bdo> HTML element.
type HTMLBdo interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLBdo

	// Body set the content of the element.
	Body(v ...UI) HTMLBdo

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLBdo

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLBdo

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLBdo

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLBdo

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLBdo

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLBdo

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLBdo

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLBdo

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLBdo

	// ID specifies a unique id for an element.
	ID(v string) HTMLBdo

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLBdo

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLBdo

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLBdo

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLBdo

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLBdo

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLBdo

	// Title specifies extra information about an element.
	Title(v string) HTMLBdo

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLBdo

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLBdo

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLBdo

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLBdo

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLBdo

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLBdo

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLBdo

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLBdo

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLBdo

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLBdo

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLBdo

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLBdo

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLBdo

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLBdo

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLBdo

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLBdo

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLBdo

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLBdo

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLBdo

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLBdo

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLBdo

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLBdo

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLBdo

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLBdo

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLBdo

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLBdo

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLBdo

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLBdo

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLBdo

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLBdo

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLBdo

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLBdo

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLBdo
}

// Bdo returns an HTML element that overrides the current text direction.
func Bdo() HTMLBdo {
	return htmlElement[HTMLBdo]{
		tag:           "bdo",
		isSelfClosing: false,
	}
}

// HTMLBlockquote is the interface that describes a <blockquote> HTML element.
type HTMLBlockquote interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLBlockquote

	// Body set the content of the element.
	Body(v ...UI) HTMLBlockquote

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLBlockquote

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLBlockquote

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLBlockquote

	// Cite specifies a URL which explains the quote/deleted/inserted text.
	Cite(v string) HTMLBlockquote

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLBlockquote

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLBlockquote

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLBlockquote

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLBlockquote

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLBlockquote

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLBlockquote

	// ID specifies a unique id for an element.
	ID(v string) HTMLBlockquote

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLBlockquote

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLBlockquote

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLBlockquote

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLBlockquote

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLBlockquote

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLBlockquote

	// Title specifies extra information about an element.
	Title(v string) HTMLBlockquote

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLBlockquote

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLBlockquote

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLBlockquote

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLBlockquote

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLBlockquote

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLBlockquote

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLBlockquote

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLBlockquote

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLBlockquote

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLBlockquote

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLBlockquote

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLBlockquote

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLBlockquote

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLBlockquote

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLBlockquote

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLBlockquote

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLBlockquote

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLBlockquote

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLBlockquote

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLBlockquote

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLBlockquote

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLBlockquote

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLBlockquote

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLBlockquote

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLBlockquote

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLBlockquote

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLBlockquote

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLBlockquote

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLBlockquote

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLBlockquote

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLBlockquote

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLBlockquote

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLBlockquote
}

// Blockquote returns an HTML element that defines a section that is quoted from another source.
func Blockquote() HTMLBlockquote {
	return htmlElement[HTMLBlockquote]{
		tag:           "blockquote",
		isSelfClosing: false,
	}
}

// HTMLBody is the interface that describes a <body> HTML element.
type HTMLBody interface {
	UI

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLBody

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLBody

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLBody

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLBody

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLBody

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLBody

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLBody

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLBody

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLBody

	// ID specifies a unique id for an element.
	ID(v string) HTMLBody

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLBody

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLBody

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLBody

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLBody

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLBody

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLBody

	// Title specifies extra information about an element.
	Title(v string) HTMLBody

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLBody

	// OnAfterPrint runs the given handler after the document is printed.
	OnAfterPrint(h EventHandler, scope ...any) HTMLBody

	// OnBeforePrint calls the given handler before the document is printed.
	OnBeforePrint(h EventHandler, scope ...any) HTMLBody

	// OnBeforeUnload calls the given handler when the document is about to be unloaded.
	OnBeforeUnload(h EventHandler, scope ...any) HTMLBody

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLBody

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLBody

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLBody

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLBody

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLBody

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLBody

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLBody

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLBody

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLBody

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLBody

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLBody

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLBody

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLBody

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLBody

	// OnError calls the given handler when an error occurs.
	OnError(h EventHandler, scope ...any) HTMLBody

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLBody

	// OnHashChange calls the given handler when there has been changes to the anchor part of the a URL.
	OnHashChange(h EventHandler, scope ...any) HTMLBody

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLBody

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLBody

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLBody

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLBody

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLBody

	// OnLoad calls the given handler after the element is finished loading.
	OnLoad(h EventHandler, scope ...any) HTMLBody

	// OnMessage calls then given handler when a message is triggered.
	OnMessage(h EventHandler, scope ...any) HTMLBody

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLBody

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLBody

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLBody

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLBody

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLBody

	// OnOffline calls the given handler when the browser starts to work offline.
	OnOffline(h EventHandler, scope ...any) HTMLBody

	// OnOnline calls the given handler when the browser starts to work online.
	OnOnline(h EventHandler, scope ...any) HTMLBody

	// OnPageHide calls the given handler when a user navigates away from a page.
	OnPageHide(h EventHandler, scope ...any) HTMLBody

	// OnPageShow calls the given handler when a user navigates to a page.
	OnPageShow(h EventHandler, scope ...any) HTMLBody

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLBody

	// OnPopState calls the given handler when the window's history changes.
	OnPopState(h EventHandler, scope ...any) HTMLBody

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLBody

	// OnResize calls the given handler when the browser window is resized.
	OnResize(h EventHandler, scope ...any) HTMLBody

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLBody

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLBody

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLBody

	// OnStorage calls the given handler when a Web Storage area is updated.
	OnStorage(h EventHandler, scope ...any) HTMLBody

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLBody

	// OnUnload calls the given handler once a page has unloaded (or the browser window has been closed).
	OnUnload(h EventHandler, scope ...any) HTMLBody

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLBody
}

// Body returns an HTML element that defines the document's body.
func Body() HTMLBody {
	return htmlElement[HTMLBody]{
		tag:           "body",
		isSelfClosing: false,
	}
}

// HTMLBr is the interface that describes a <br> HTML element.
type HTMLBr interface {
	UI

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLBr

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLBr

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLBr

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLBr

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLBr

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLBr

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLBr

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLBr

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLBr

	// ID specifies a unique id for an element.
	ID(v string) HTMLBr

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLBr

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLBr

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLBr

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLBr

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLBr

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLBr

	// Title specifies extra information about an element.
	Title(v string) HTMLBr

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLBr

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLBr

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLBr

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLBr

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLBr

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLBr

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLBr

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLBr

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLBr

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLBr

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLBr

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLBr

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLBr

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLBr

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLBr

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLBr

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLBr

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLBr

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLBr

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLBr

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLBr

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLBr

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLBr

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLBr

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLBr

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLBr

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLBr

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLBr

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLBr

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLBr

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLBr

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLBr

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLBr
}

// Br returns an HTML element that defines a single line break.
func Br() HTMLBr {
	return htmlElement[HTMLBr]{
		tag:           "br",
		isSelfClosing: true,
	}
}

// HTMLButton is the interface that describes a <button> HTML element.
type HTMLButton interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLButton

	// Body set the content of the element.
	Body(v ...UI) HTMLButton

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLButton

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLButton

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLButton

	// AutoFocus specifies that the element should automatically get focus when the page loads.
	AutoFocus(v bool) HTMLButton

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLButton

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLButton

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLButton

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLButton

	// Disabled specifies that the specified element/group of elements should be disabled.
	Disabled(v bool) HTMLButton

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLButton

	// Form specifies the name of the form the element belongs to.
	Form(v string) HTMLButton

	// FormAction specifies where to send the form-data when a form is submitted. Only for submit type.
	FormAction(v string) HTMLButton

	// FormEncType specifies how form-data should be encoded before sending it to a server. Only for submit type.
	FormEncType(v string) HTMLButton

	// FormMethod specifies how to send the form-data (which HTTP method to use). Only for submit type.
	FormMethod(v string) HTMLButton

	// FormNoValidate specifies that the form-data should not be validated on submission. Only for submit type.
	FormNoValidate(v bool) HTMLButton

	// FormTarget specifies where to display the response after submitting the form. Only for submit type.
	FormTarget(v string) HTMLButton

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLButton

	// ID specifies a unique id for an element.
	ID(v string) HTMLButton

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLButton

	// Name specifies the name of the element.
	Name(v string) HTMLButton

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLButton

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLButton

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLButton

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLButton

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLButton

	// Title specifies extra information about an element.
	Title(v string) HTMLButton

	// Type specifies the type of element.
	Type(v string) HTMLButton

	// Value specifies the value of the element.
	Value(v any) HTMLButton

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLButton

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLButton

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLButton

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLButton

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLButton

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLButton

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLButton

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLButton

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLButton

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLButton

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLButton

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLButton

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLButton

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLButton

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLButton

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLButton

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLButton

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLButton

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLButton

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLButton

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLButton

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLButton

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLButton

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLButton

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLButton

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLButton

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLButton

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLButton

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLButton

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLButton

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLButton

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLButton

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLButton
}

// Button returns an HTML element that defines a clickable button.
func Button() HTMLButton {
	return htmlElement[HTMLButton]{
		tag:           "button",
		isSelfClosing: false,
	}
}

// HTMLCanvas is the interface that describes a <canvas> HTML element.
type HTMLCanvas interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLCanvas

	// Body set the content of the element.
	Body(v ...UI) HTMLCanvas

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLCanvas

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLCanvas

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLCanvas

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLCanvas

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLCanvas

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLCanvas

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLCanvas

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLCanvas

	// Height specifies the height of the element (in pixels).
	Height(v int) HTMLCanvas

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLCanvas

	// ID specifies a unique id for an element.
	ID(v string) HTMLCanvas

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLCanvas

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLCanvas

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLCanvas

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLCanvas

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLCanvas

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLCanvas

	// Title specifies extra information about an element.
	Title(v string) HTMLCanvas

	// Width specifies the width of the element.
	Width(v int) HTMLCanvas

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLCanvas

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLCanvas

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLCanvas

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLCanvas

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLCanvas

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLCanvas

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLCanvas

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLCanvas

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLCanvas

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLCanvas

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLCanvas

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLCanvas

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLCanvas

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLCanvas

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLCanvas

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLCanvas

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLCanvas

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLCanvas

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLCanvas

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLCanvas

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLCanvas

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLCanvas

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLCanvas

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLCanvas

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLCanvas

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLCanvas

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLCanvas

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLCanvas

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLCanvas

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLCanvas

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLCanvas

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLCanvas

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLCanvas
}

// Canvas returns an HTML element that is used to draw graphics on the fly.
func Canvas() HTMLCanvas {
	return htmlElement[HTMLCanvas]{
		tag:           "canvas",
		isSelfClosing: false,
	}
}

// HTMLCaption is the interface that describes a <caption> HTML element.
type HTMLCaption interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLCaption

	// Body set the content of the element.
	Body(v ...UI) HTMLCaption

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLCaption

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLCaption

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLCaption

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLCaption

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLCaption

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLCaption

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLCaption

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLCaption

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLCaption

	// ID specifies a unique id for an element.
	ID(v string) HTMLCaption

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLCaption

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLCaption

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLCaption

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLCaption

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLCaption

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLCaption

	// Title specifies extra information about an element.
	Title(v string) HTMLCaption

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLCaption

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLCaption

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLCaption

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLCaption

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLCaption

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLCaption

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLCaption

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLCaption

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLCaption

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLCaption

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLCaption

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLCaption

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLCaption

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLCaption

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLCaption

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLCaption

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLCaption

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLCaption

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLCaption

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLCaption

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLCaption

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLCaption

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLCaption

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLCaption

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLCaption

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLCaption

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLCaption

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLCaption

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLCaption

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLCaption

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLCaption

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLCaption

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLCaption
}

// Caption returns an HTML element that defines a table caption.
func Caption() HTMLCaption {
	return htmlElement[HTMLCaption]{
		tag:           "caption",
		isSelfClosing: false,
	}
}

// HTMLCite is the interface that describes a <cite> HTML element.
type HTMLCite interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLCite

	// Body set the content of the element.
	Body(v ...UI) HTMLCite

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLCite

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLCite

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLCite

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLCite

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLCite

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLCite

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLCite

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLCite

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLCite

	// ID specifies a unique id for an element.
	ID(v string) HTMLCite

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLCite

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLCite

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLCite

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLCite

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLCite

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLCite

	// Title specifies extra information about an element.
	Title(v string) HTMLCite

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLCite

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLCite

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLCite

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLCite

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLCite

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLCite

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLCite

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLCite

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLCite

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLCite

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLCite

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLCite

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLCite

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLCite

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLCite

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLCite

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLCite

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLCite

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLCite

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLCite

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLCite

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLCite

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLCite

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLCite

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLCite

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLCite

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLCite

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLCite

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLCite

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLCite

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLCite

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLCite

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLCite
}

// Cite returns an HTML element that defines the title of a work.
func Cite() HTMLCite {
	return htmlElement[HTMLCite]{
		tag:           "cite",
		isSelfClosing: false,
	}
}

// HTMLCode is the interface that describes a <code> HTML element.
type HTMLCode interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLCode

	// Body set the content of the element.
	Body(v ...UI) HTMLCode

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLCode

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLCode

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLCode

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLCode

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLCode

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLCode

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLCode

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLCode

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLCode

	// ID specifies a unique id for an element.
	ID(v string) HTMLCode

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLCode

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLCode

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLCode

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLCode

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLCode

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLCode

	// Title specifies extra information about an element.
	Title(v string) HTMLCode

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLCode

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLCode

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLCode

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLCode

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLCode

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLCode

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLCode

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLCode

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLCode

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLCode

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLCode

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLCode

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLCode

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLCode

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLCode

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLCode

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLCode

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLCode

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLCode

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLCode

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLCode

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLCode

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLCode

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLCode

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLCode

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLCode

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLCode

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLCode

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLCode

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLCode

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLCode

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLCode

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLCode
}

// Code returns an HTML element that defines a piece of computer code.
func Code() HTMLCode {
	return htmlElement[HTMLCode]{
		tag:           "code",
		isSelfClosing: false,
	}
}

// HTMLCol is the interface that describes a <col> HTML element.
type HTMLCol interface {
	UI

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLCol

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLCol

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLCol

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLCol

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLCol

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLCol

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLCol

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLCol

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLCol

	// ID specifies a unique id for an element.
	ID(v string) HTMLCol

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLCol

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLCol

	// Span specifies the number of columns to span.
	Span(v int) HTMLCol

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLCol

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLCol

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLCol

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLCol

	// Title specifies extra information about an element.
	Title(v string) HTMLCol

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLCol

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLCol

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLCol

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLCol

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLCol

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLCol

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLCol

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLCol

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLCol

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLCol

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLCol

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLCol

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLCol

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLCol

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLCol

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLCol

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLCol

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLCol

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLCol

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLCol

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLCol

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLCol

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLCol

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLCol

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLCol

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLCol

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLCol

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLCol

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLCol

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLCol

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLCol

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLCol

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLCol
}

// Col returns an HTML element that specifies column properties for each column within a colgroup element.
func Col() HTMLCol {
	return htmlElement[HTMLCol]{
		tag:           "col",
		isSelfClosing: true,
	}
}

// HTMLColGroup is the interface that describes a <colgroup> HTML element.
type HTMLColGroup interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLColGroup

	// Body set the content of the element.
	Body(v ...UI) HTMLColGroup

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLColGroup

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLColGroup

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLColGroup

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLColGroup

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLColGroup

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLColGroup

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLColGroup

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLColGroup

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLColGroup

	// ID specifies a unique id for an element.
	ID(v string) HTMLColGroup

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLColGroup

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLColGroup

	// Span specifies the number of columns to span.
	Span(v int) HTMLColGroup

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLColGroup

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLColGroup

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLColGroup

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLColGroup

	// Title specifies extra information about an element.
	Title(v string) HTMLColGroup

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLColGroup

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLColGroup

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLColGroup

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLColGroup

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLColGroup

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLColGroup

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLColGroup

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLColGroup

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLColGroup

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLColGroup

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLColGroup

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLColGroup

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLColGroup

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLColGroup

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLColGroup

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLColGroup

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLColGroup

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLColGroup

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLColGroup

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLColGroup

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLColGroup

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLColGroup

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLColGroup

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLColGroup

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLColGroup

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLColGroup

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLColGroup

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLColGroup

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLColGroup

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLColGroup

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLColGroup

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLColGroup

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLColGroup
}

// ColGroup returns an HTML element that specifies a group of one or more columns in a table for formatting.
func ColGroup() HTMLColGroup {
	return htmlElement[HTMLColGroup]{
		tag:           "colgroup",
		isSelfClosing: false,
	}
}

// HTMLData is the interface that describes a <data> HTML element.
type HTMLData interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLData

	// Body set the content of the element.
	Body(v ...UI) HTMLData

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLData

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLData

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLData

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLData

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLData

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLData

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLData

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLData

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLData

	// ID specifies a unique id for an element.
	ID(v string) HTMLData

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLData

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLData

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLData

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLData

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLData

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLData

	// Title specifies extra information about an element.
	Title(v string) HTMLData

	// Value specifies the value of the element.
	Value(v any) HTMLData

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLData
}

// Data returns an HTML element that links the given content with a machine-readable translation.
func Data() HTMLData {
	return htmlElement[HTMLData]{
		tag:           "data",
		isSelfClosing: false,
	}
}

// HTMLDataList is the interface that describes a <datalist> HTML element.
type HTMLDataList interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLDataList

	// Body set the content of the element.
	Body(v ...UI) HTMLDataList

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLDataList

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLDataList

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLDataList

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLDataList

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLDataList

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLDataList

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLDataList

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLDataList

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLDataList

	// ID specifies a unique id for an element.
	ID(v string) HTMLDataList

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLDataList

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLDataList

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLDataList

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLDataList

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLDataList

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLDataList

	// Title specifies extra information about an element.
	Title(v string) HTMLDataList

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLDataList

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLDataList

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLDataList

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLDataList

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLDataList

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLDataList

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLDataList

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLDataList

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLDataList

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLDataList

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLDataList

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLDataList

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLDataList

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLDataList

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLDataList

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLDataList

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLDataList

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLDataList

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLDataList

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLDataList

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLDataList

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLDataList

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLDataList

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLDataList

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLDataList

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLDataList

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLDataList

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLDataList

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLDataList

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLDataList

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLDataList

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLDataList

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLDataList
}

// DataList returns an HTML element that specifies a list of pre-defined options for input controls.
func DataList() HTMLDataList {
	return htmlElement[HTMLDataList]{
		tag:           "datalist",
		isSelfClosing: false,
	}
}

// HTMLDd is the interface that describes a <dd> HTML element.
type HTMLDd interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLDd

	// Body set the content of the element.
	Body(v ...UI) HTMLDd

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLDd

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLDd

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLDd

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLDd

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLDd

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLDd

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLDd

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLDd

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLDd

	// ID specifies a unique id for an element.
	ID(v string) HTMLDd

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLDd

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLDd

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLDd

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLDd

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLDd

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLDd

	// Title specifies extra information about an element.
	Title(v string) HTMLDd

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLDd

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLDd

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLDd

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLDd

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLDd

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLDd

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLDd

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLDd

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLDd

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLDd

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLDd

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLDd

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLDd

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLDd

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLDd

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLDd

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLDd

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLDd

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLDd

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLDd

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLDd

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLDd

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLDd

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLDd

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLDd

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLDd

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLDd

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLDd

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLDd

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLDd

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLDd

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLDd

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLDd
}

// Dd returns an HTML element that defines a description/value of a term in a description list.
func Dd() HTMLDd {
	return htmlElement[HTMLDd]{
		tag:           "dd",
		isSelfClosing: false,
	}
}

// HTMLDel is the interface that describes a <del> HTML element.
type HTMLDel interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLDel

	// Body set the content of the element.
	Body(v ...UI) HTMLDel

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLDel

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLDel

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLDel

	// Cite specifies a URL which explains the quote/deleted/inserted text.
	Cite(v string) HTMLDel

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLDel

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLDel

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLDel

	// DateTime specifies the date and time.
	DateTime(v string) HTMLDel

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLDel

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLDel

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLDel

	// ID specifies a unique id for an element.
	ID(v string) HTMLDel

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLDel

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLDel

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLDel

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLDel

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLDel

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLDel

	// Title specifies extra information about an element.
	Title(v string) HTMLDel

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLDel

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLDel

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLDel

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLDel

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLDel

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLDel

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLDel

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLDel

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLDel

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLDel

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLDel

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLDel

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLDel

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLDel

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLDel

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLDel

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLDel

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLDel

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLDel

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLDel

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLDel

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLDel

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLDel

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLDel

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLDel

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLDel

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLDel

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLDel

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLDel

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLDel

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLDel

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLDel

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLDel
}

// Del returns an HTML element that defines text that has been deleted from a document.
func Del() HTMLDel {
	return htmlElement[HTMLDel]{
		tag:           "del",
		isSelfClosing: false,
	}
}

// HTMLDetails is the interface that describes a <details> HTML element.
type HTMLDetails interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLDetails

	// Body set the content of the element.
	Body(v ...UI) HTMLDetails

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLDetails

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLDetails

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLDetails

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLDetails

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLDetails

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLDetails

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLDetails

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLDetails

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLDetails

	// ID specifies a unique id for an element.
	ID(v string) HTMLDetails

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLDetails

	// Open specifies that the details should be visible (open) to the user.
	Open(v bool) HTMLDetails

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLDetails

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLDetails

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLDetails

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLDetails

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLDetails

	// Title specifies extra information about an element.
	Title(v string) HTMLDetails

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLDetails

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLDetails

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLDetails

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLDetails

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLDetails

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLDetails

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLDetails

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLDetails

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLDetails

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLDetails

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLDetails

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLDetails

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLDetails

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLDetails

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLDetails

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLDetails

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLDetails

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLDetails

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLDetails

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLDetails

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLDetails

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLDetails

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLDetails

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLDetails

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLDetails

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLDetails

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLDetails

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLDetails

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLDetails

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLDetails

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLDetails

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLDetails

	// OnToggle calls the given handler when the user opens or closes the details element.
	OnToggle(h EventHandler, scope ...any) HTMLDetails

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLDetails
}

// Details returns an HTML element that defines additional details that the user can view or hide.
func Details() HTMLDetails {
	return htmlElement[HTMLDetails]{
		tag:           "details",
		isSelfClosing: false,
	}
}

// HTMLDfn is the interface that describes a <dfn> HTML element.
type HTMLDfn interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLDfn

	// Body set the content of the element.
	Body(v ...UI) HTMLDfn

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLDfn

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLDfn

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLDfn

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLDfn

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLDfn

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLDfn

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLDfn

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLDfn

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLDfn

	// ID specifies a unique id for an element.
	ID(v string) HTMLDfn

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLDfn

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLDfn

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLDfn

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLDfn

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLDfn

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLDfn

	// Title specifies extra information about an element.
	Title(v string) HTMLDfn

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLDfn

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLDfn

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLDfn

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLDfn

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLDfn

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLDfn

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLDfn

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLDfn

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLDfn

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLDfn

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLDfn

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLDfn

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLDfn

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLDfn

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLDfn

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLDfn

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLDfn

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLDfn

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLDfn

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLDfn

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLDfn

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLDfn

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLDfn

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLDfn

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLDfn

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLDfn

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLDfn

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLDfn

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLDfn

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLDfn

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLDfn

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLDfn

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLDfn
}

// Dfn returns an HTML element that represents the defining instance of a term.
func Dfn() HTMLDfn {
	return htmlElement[HTMLDfn]{
		tag:           "dfn",
		isSelfClosing: false,
	}
}

// HTMLDialog is the interface that describes a <dialog> HTML element.
type HTMLDialog interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLDialog

	// Body set the content of the element.
	Body(v ...UI) HTMLDialog

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLDialog

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLDialog

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLDialog

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLDialog

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLDialog

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLDialog

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLDialog

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLDialog

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLDialog

	// ID specifies a unique id for an element.
	ID(v string) HTMLDialog

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLDialog

	// Open specifies that the details should be visible (open) to the user.
	Open(v bool) HTMLDialog

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLDialog

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLDialog

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLDialog

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLDialog

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLDialog

	// Title specifies extra information about an element.
	Title(v string) HTMLDialog

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLDialog

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLDialog

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLDialog

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLDialog

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLDialog

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLDialog

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLDialog

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLDialog

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLDialog

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLDialog

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLDialog

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLDialog

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLDialog

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLDialog

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLDialog

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLDialog

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLDialog

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLDialog

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLDialog

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLDialog

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLDialog

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLDialog

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLDialog

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLDialog

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLDialog

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLDialog

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLDialog

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLDialog

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLDialog

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLDialog

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLDialog

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLDialog

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLDialog
}

// Dialog returns an HTML element that defines a dialog box or window.
func Dialog() HTMLDialog {
	return htmlElement[HTMLDialog]{
		tag:           "dialog",
		isSelfClosing: false,
	}
}

// HTMLDiv is the interface that describes a <div> HTML element.
type HTMLDiv interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLDiv

	// Body set the content of the element.
	Body(v ...UI) HTMLDiv

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLDiv

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLDiv

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLDiv

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLDiv

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLDiv

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLDiv

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLDiv

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLDiv

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLDiv

	// ID specifies a unique id for an element.
	ID(v string) HTMLDiv

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLDiv

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLDiv

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLDiv

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLDiv

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLDiv

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLDiv

	// Title specifies extra information about an element.
	Title(v string) HTMLDiv

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLDiv

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLDiv

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLDiv

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLDiv

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLDiv

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLDiv

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLDiv

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLDiv

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLDiv

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLDiv

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLDiv

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLDiv

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLDiv

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLDiv

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLDiv

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLDiv

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLDiv

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLDiv

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLDiv

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLDiv

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLDiv

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLDiv

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLDiv

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLDiv

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLDiv

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLDiv

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLDiv

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLDiv

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLDiv

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLDiv

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLDiv

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLDiv

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLDiv
}

// Div returns an HTML element that defines a section in a document.
func Div() HTMLDiv {
	return htmlElement[HTMLDiv]{
		tag:           "div",
		isSelfClosing: false,
	}
}

// HTMLDl is the interface that describes a <dl> HTML element.
type HTMLDl interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLDl

	// Body set the content of the element.
	Body(v ...UI) HTMLDl

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLDl

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLDl

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLDl

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLDl

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLDl

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLDl

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLDl

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLDl

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLDl

	// ID specifies a unique id for an element.
	ID(v string) HTMLDl

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLDl

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLDl

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLDl

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLDl

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLDl

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLDl

	// Title specifies extra information about an element.
	Title(v string) HTMLDl

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLDl

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLDl

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLDl

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLDl

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLDl

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLDl

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLDl

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLDl

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLDl

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLDl

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLDl

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLDl

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLDl

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLDl

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLDl

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLDl

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLDl

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLDl

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLDl

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLDl

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLDl

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLDl

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLDl

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLDl

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLDl

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLDl

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLDl

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLDl

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLDl

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLDl

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLDl

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLDl

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLDl
}

// Dl returns an HTML element that defines a description list.
func Dl() HTMLDl {
	return htmlElement[HTMLDl]{
		tag:           "dl",
		isSelfClosing: false,
	}
}

// HTMLDt is the interface that describes a <dt> HTML element.
type HTMLDt interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLDt

	// Body set the content of the element.
	Body(v ...UI) HTMLDt

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLDt

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLDt

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLDt

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLDt

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLDt

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLDt

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLDt

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLDt

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLDt

	// ID specifies a unique id for an element.
	ID(v string) HTMLDt

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLDt

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLDt

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLDt

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLDt

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLDt

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLDt

	// Title specifies extra information about an element.
	Title(v string) HTMLDt

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLDt

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLDt

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLDt

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLDt

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLDt

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLDt

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLDt

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLDt

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLDt

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLDt

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLDt

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLDt

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLDt

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLDt

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLDt

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLDt

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLDt

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLDt

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLDt

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLDt

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLDt

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLDt

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLDt

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLDt

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLDt

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLDt

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLDt

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLDt

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLDt

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLDt

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLDt

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLDt

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLDt
}

// Dt returns an HTML element that defines a term/name in a description list.
func Dt() HTMLDt {
	return htmlElement[HTMLDt]{
		tag:           "dt",
		isSelfClosing: false,
	}
}

// HTMLEm is the interface that describes a <em> HTML element.
type HTMLEm interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLEm

	// Body set the content of the element.
	Body(v ...UI) HTMLEm

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLEm

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLEm

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLEm

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLEm

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLEm

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLEm

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLEm

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLEm

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLEm

	// ID specifies a unique id for an element.
	ID(v string) HTMLEm

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLEm

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLEm

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLEm

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLEm

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLEm

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLEm

	// Title specifies extra information about an element.
	Title(v string) HTMLEm

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLEm

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLEm

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLEm

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLEm

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLEm

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLEm

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLEm

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLEm

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLEm

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLEm

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLEm

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLEm

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLEm

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLEm

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLEm

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLEm

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLEm

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLEm

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLEm

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLEm

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLEm

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLEm

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLEm

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLEm

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLEm

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLEm

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLEm

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLEm

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLEm

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLEm

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLEm

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLEm

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLEm
}

// Em returns an HTML element that defines emphasized text.
func Em() HTMLEm {
	return htmlElement[HTMLEm]{
		tag:           "em",
		isSelfClosing: false,
	}
}

// HTMLEmbed is the interface that describes a <embed> HTML element.
type HTMLEmbed interface {
	UI

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLEmbed

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLEmbed

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLEmbed

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLEmbed

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLEmbed

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLEmbed

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLEmbed

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLEmbed

	// Height specifies the height of the element (in pixels).
	Height(v int) HTMLEmbed

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLEmbed

	// ID specifies a unique id for an element.
	ID(v string) HTMLEmbed

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLEmbed

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLEmbed

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLEmbed

	// Src specifies the URL of the media file.
	Src(v string) HTMLEmbed

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLEmbed

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLEmbed

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLEmbed

	// Title specifies extra information about an element.
	Title(v string) HTMLEmbed

	// Type specifies the type of element.
	Type(v string) HTMLEmbed

	// Width specifies the width of the element.
	Width(v int) HTMLEmbed

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLEmbed

	// OnAbort calls the given handler on abort.
	OnAbort(h EventHandler, scope ...any) HTMLEmbed

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLEmbed

	// OnCanPlay calls the given handler when a file is ready to start playing (when it has buffered enough to begin).
	OnCanPlay(h EventHandler, scope ...any) HTMLEmbed

	// OnCanPlayThrough calls the given handler when a file can be played all the way to the end without pausing for buffering.
	OnCanPlayThrough(h EventHandler, scope ...any) HTMLEmbed

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLEmbed

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLEmbed

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLEmbed

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLEmbed

	// OnCueChange calls the given handler when the cue changes in a track element.
	OnCueChange(h EventHandler, scope ...any) HTMLEmbed

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLEmbed

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLEmbed

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLEmbed

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLEmbed

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLEmbed

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLEmbed

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLEmbed

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLEmbed

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLEmbed

	// OnDurationChange calls the given handler when the length of the media changes.
	OnDurationChange(h EventHandler, scope ...any) HTMLEmbed

	// OnEmptied calls the given handler when something bad happens and the file is suddenly unavailable (like unexpectedly disconnects).
	OnEmptied(h EventHandler, scope ...any) HTMLEmbed

	// OnEnded calls the given handler when the media has reach the end.
	OnEnded(h EventHandler, scope ...any) HTMLEmbed

	// OnError calls the given handler when an error occurs.
	OnError(h EventHandler, scope ...any) HTMLEmbed

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLEmbed

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLEmbed

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLEmbed

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLEmbed

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLEmbed

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLEmbed

	// OnLoadStart calls the given handler just as the file begins to load before anything is actually loaded.
	OnLoadStart(h EventHandler, scope ...any) HTMLEmbed

	// OnLoadedData calls the given handler when media data is loaded.
	OnLoadedData(h EventHandler, scope ...any) HTMLEmbed

	// OnLoadedMetaData calls the given handler when meta data (like dimensions and duration) are loaded.
	OnLoadedMetaData(h EventHandler, scope ...any) HTMLEmbed

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLEmbed

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLEmbed

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLEmbed

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLEmbed

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLEmbed

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLEmbed

	// OnPause calls the given handler when the media is paused either by the user or programmatically.
	OnPause(h EventHandler, scope ...any) HTMLEmbed

	// OnPlay calls the given handler when the media is ready to start playing.
	OnPlay(h EventHandler, scope ...any) HTMLEmbed

	// OnPlaying calls the given handler when the media actually has started playing.
	OnPlaying(h EventHandler, scope ...any) HTMLEmbed

	// OnProgress calls the given handler when the browser is in the process of getting the media data.
	OnProgress(h EventHandler, scope ...any) HTMLEmbed

	// OnRateChange calls the given handler each time the playback rate changes (like when a user switches to a slow motion or fast forward mode).
	OnRateChange(h EventHandler, scope ...any) HTMLEmbed

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLEmbed

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLEmbed

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLEmbed

	// OnSeeked calls the given handler when the seeking attribute is set to false indicating that seeking has ended.
	OnSeeked(h EventHandler, scope ...any) HTMLEmbed

	// OnSeeking calls the given handler when the seeking attribute is set to true indicating that seeking is active.
	OnSeeking(h EventHandler, scope ...any) HTMLEmbed

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLEmbed

	// OnStalled calls the given handler when the browser is unable to fetch the media data for whatever reason.
	OnStalled(h EventHandler, scope ...any) HTMLEmbed

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLEmbed

	// OnSuspend calls the given handler when fetching the media data is stopped before it is completely loaded for whatever reason.
	OnSuspend(h EventHandler, scope ...any) HTMLEmbed

	// OnTimeUpdate calls the given handler when the playing position has changed (like when the user fast forwards to a different point in the media).
	OnTimeUpdate(h EventHandler, scope ...any) HTMLEmbed

	// OnVolumeChange calls the given handler each time the volume is changed which (includes setting the volume to "mute").
	OnVolumeChange(h EventHandler, scope ...any) HTMLEmbed

	// OnWaiting calls the given handler when the media has paused but is expected to resume (like when the media pauses to buffer more data).
	OnWaiting(h EventHandler, scope ...any) HTMLEmbed

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLEmbed
}

// Embed returns an HTML element that defines a container for an external (non-HTML) application.
func Embed() HTMLEmbed {
	return htmlElement[HTMLEmbed]{
		tag:           "embed",
		isSelfClosing: true,
	}
}

// HTMLFieldSet is the interface that describes a <fieldset> HTML element.
type HTMLFieldSet interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLFieldSet

	// Body set the content of the element.
	Body(v ...UI) HTMLFieldSet

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLFieldSet

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLFieldSet

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLFieldSet

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLFieldSet

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLFieldSet

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLFieldSet

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLFieldSet

	// Disabled specifies that the specified element/group of elements should be disabled.
	Disabled(v bool) HTMLFieldSet

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLFieldSet

	// Form specifies the name of the form the element belongs to.
	Form(v string) HTMLFieldSet

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLFieldSet

	// ID specifies a unique id for an element.
	ID(v string) HTMLFieldSet

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLFieldSet

	// Name specifies the name of the element.
	Name(v string) HTMLFieldSet

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLFieldSet

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLFieldSet

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLFieldSet

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLFieldSet

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLFieldSet

	// Title specifies extra information about an element.
	Title(v string) HTMLFieldSet

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLFieldSet

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLFieldSet

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLFieldSet

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLFieldSet

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLFieldSet

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLFieldSet

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLFieldSet

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLFieldSet

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLFieldSet

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLFieldSet

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLFieldSet

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLFieldSet

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLFieldSet

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLFieldSet

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLFieldSet

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLFieldSet

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLFieldSet

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLFieldSet

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLFieldSet

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLFieldSet

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLFieldSet

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLFieldSet

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLFieldSet

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLFieldSet

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLFieldSet

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLFieldSet

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLFieldSet

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLFieldSet

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLFieldSet

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLFieldSet

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLFieldSet

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLFieldSet

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLFieldSet
}

// FieldSet returns an HTML element that groups related elements in a form.
func FieldSet() HTMLFieldSet {
	return htmlElement[HTMLFieldSet]{
		tag:           "fieldset",
		isSelfClosing: false,
	}
}

// HTMLFigCaption is the interface that describes a <figcaption> HTML element.
type HTMLFigCaption interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLFigCaption

	// Body set the content of the element.
	Body(v ...UI) HTMLFigCaption

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLFigCaption

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLFigCaption

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLFigCaption

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLFigCaption

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLFigCaption

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLFigCaption

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLFigCaption

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLFigCaption

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLFigCaption

	// ID specifies a unique id for an element.
	ID(v string) HTMLFigCaption

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLFigCaption

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLFigCaption

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLFigCaption

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLFigCaption

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLFigCaption

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLFigCaption

	// Title specifies extra information about an element.
	Title(v string) HTMLFigCaption

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLFigCaption

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLFigCaption

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLFigCaption

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLFigCaption

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLFigCaption

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLFigCaption

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLFigCaption

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLFigCaption

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLFigCaption

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLFigCaption

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLFigCaption

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLFigCaption

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLFigCaption

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLFigCaption

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLFigCaption

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLFigCaption

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLFigCaption

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLFigCaption

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLFigCaption

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLFigCaption

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLFigCaption

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLFigCaption

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLFigCaption

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLFigCaption

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLFigCaption

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLFigCaption

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLFigCaption

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLFigCaption

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLFigCaption

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLFigCaption

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLFigCaption

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLFigCaption

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLFigCaption
}

// FigCaption returns an HTML element that defines a caption for a figure element.
func FigCaption() HTMLFigCaption {
	return htmlElement[HTMLFigCaption]{
		tag:           "figcaption",
		isSelfClosing: false,
	}
}

// HTMLFigure is the interface that describes a <figure> HTML element.
type HTMLFigure interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLFigure

	// Body set the content of the element.
	Body(v ...UI) HTMLFigure

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLFigure

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLFigure

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLFigure

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLFigure

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLFigure

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLFigure

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLFigure

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLFigure

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLFigure

	// ID specifies a unique id for an element.
	ID(v string) HTMLFigure

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLFigure

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLFigure

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLFigure

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLFigure

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLFigure

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLFigure

	// Title specifies extra information about an element.
	Title(v string) HTMLFigure

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLFigure

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLFigure

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLFigure

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLFigure

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLFigure

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLFigure

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLFigure

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLFigure

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLFigure

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLFigure

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLFigure

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLFigure

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLFigure

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLFigure

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLFigure

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLFigure

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLFigure

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLFigure

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLFigure

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLFigure

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLFigure

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLFigure

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLFigure

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLFigure

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLFigure

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLFigure

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLFigure

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLFigure

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLFigure

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLFigure

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLFigure

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLFigure

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLFigure
}

// Figure returns an HTML element that specifies self-contained content.
func Figure() HTMLFigure {
	return htmlElement[HTMLFigure]{
		tag:           "figure",
		isSelfClosing: false,
	}
}

// HTMLFooter is the interface that describes a <footer> HTML element.
type HTMLFooter interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLFooter

	// Body set the content of the element.
	Body(v ...UI) HTMLFooter

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLFooter

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLFooter

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLFooter

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLFooter

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLFooter

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLFooter

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLFooter

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLFooter

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLFooter

	// ID specifies a unique id for an element.
	ID(v string) HTMLFooter

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLFooter

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLFooter

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLFooter

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLFooter

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLFooter

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLFooter

	// Title specifies extra information about an element.
	Title(v string) HTMLFooter

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLFooter

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLFooter

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLFooter

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLFooter

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLFooter

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLFooter

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLFooter

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLFooter

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLFooter

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLFooter

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLFooter

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLFooter

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLFooter

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLFooter

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLFooter

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLFooter

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLFooter

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLFooter

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLFooter

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLFooter

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLFooter

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLFooter

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLFooter

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLFooter

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLFooter

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLFooter

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLFooter

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLFooter

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLFooter

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLFooter

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLFooter

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLFooter

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLFooter
}

// Footer returns an HTML element that defines a footer for a document or section.
func Footer() HTMLFooter {
	return htmlElement[HTMLFooter]{
		tag:           "footer",
		isSelfClosing: false,
	}
}

// HTMLForm is the interface that describes a <form> HTML element.
type HTMLForm interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLForm

	// Body set the content of the element.
	Body(v ...UI) HTMLForm

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLForm

	// AcceptCharset specifies the character encodings that are to be used for the form submission.
	AcceptCharset(v string) HTMLForm

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLForm

	// Action specifies where to send the form-data when a form is submitted.
	Action(v string) HTMLForm

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLForm

	// AutoComplete specifies whether the element should have autocomplete enabled.
	AutoComplete(v bool) HTMLForm

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLForm

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLForm

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLForm

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLForm

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLForm

	// EncType specifies how the form-data should be encoded when submitting it to the server (only for post method).
	EncType(v string) HTMLForm

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLForm

	// ID specifies a unique id for an element.
	ID(v string) HTMLForm

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLForm

	// Method specifies the HTTP method to use when sending form-data.
	Method(v string) HTMLForm

	// Name specifies the name of the element.
	Name(v string) HTMLForm

	// NoValidate specifies that the form should not be validated when submitted.
	NoValidate(v bool) HTMLForm

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLForm

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLForm

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLForm

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLForm

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLForm

	// Target specifies the target for where to open the linked document or where to submit the form.
	Target(v string) HTMLForm

	// Title specifies extra information about an element.
	Title(v string) HTMLForm

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLForm

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLForm

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLForm

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLForm

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLForm

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLForm

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLForm

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLForm

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLForm

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLForm

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLForm

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLForm

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLForm

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLForm

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLForm

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLForm

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLForm

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLForm

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLForm

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLForm

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLForm

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLForm

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLForm

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLForm

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLForm

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLForm

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLForm

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLForm

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLForm

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLForm

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLForm

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLForm

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLForm
}

// Form returns an HTML element that defines an HTML form for user input.
func Form() HTMLForm {
	return htmlElement[HTMLForm]{
		tag:           "form",
		isSelfClosing: false,
	}
}

// HTMLH1 is the interface that describes a <h1> HTML element.
type HTMLH1 interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLH1

	// Body set the content of the element.
	Body(v ...UI) HTMLH1

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLH1

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLH1

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLH1

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLH1

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLH1

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLH1

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLH1

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLH1

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLH1

	// ID specifies a unique id for an element.
	ID(v string) HTMLH1

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLH1

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLH1

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLH1

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLH1

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLH1

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLH1

	// Title specifies extra information about an element.
	Title(v string) HTMLH1

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLH1

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLH1

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLH1

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLH1

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLH1

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLH1

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLH1

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLH1

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLH1

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLH1

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLH1

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLH1

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLH1

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLH1

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLH1

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLH1

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLH1

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLH1

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLH1

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLH1

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLH1

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLH1

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLH1

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLH1

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLH1

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLH1

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLH1

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLH1

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLH1

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLH1

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLH1

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLH1

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLH1
}

// H1 returns an HTML element that defines HTML heading.
func H1() HTMLH1 {
	return htmlElement[HTMLH1]{
		tag:           "h1",
		isSelfClosing: false,
	}
}

// HTMLH2 is the interface that describes a <h2> HTML element.
type HTMLH2 interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLH2

	// Body set the content of the element.
	Body(v ...UI) HTMLH2

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLH2

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLH2

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLH2

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLH2

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLH2

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLH2

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLH2

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLH2

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLH2

	// ID specifies a unique id for an element.
	ID(v string) HTMLH2

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLH2

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLH2

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLH2

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLH2

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLH2

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLH2

	// Title specifies extra information about an element.
	Title(v string) HTMLH2

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLH2

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLH2

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLH2

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLH2

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLH2

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLH2

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLH2

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLH2

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLH2

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLH2

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLH2

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLH2

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLH2

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLH2

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLH2

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLH2

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLH2

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLH2

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLH2

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLH2

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLH2

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLH2

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLH2

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLH2

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLH2

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLH2

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLH2

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLH2

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLH2

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLH2

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLH2

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLH2

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLH2
}

// H2 returns an HTML element that defines HTML heading.
func H2() HTMLH2 {
	return htmlElement[HTMLH2]{
		tag:           "h2",
		isSelfClosing: false,
	}
}

// HTMLH3 is the interface that describes a <h3> HTML element.
type HTMLH3 interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLH3

	// Body set the content of the element.
	Body(v ...UI) HTMLH3

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLH3

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLH3

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLH3

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLH3

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLH3

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLH3

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLH3

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLH3

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLH3

	// ID specifies a unique id for an element.
	ID(v string) HTMLH3

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLH3

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLH3

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLH3

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLH3

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLH3

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLH3

	// Title specifies extra information about an element.
	Title(v string) HTMLH3

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLH3

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLH3

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLH3

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLH3

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLH3

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLH3

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLH3

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLH3

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLH3

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLH3

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLH3

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLH3

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLH3

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLH3

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLH3

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLH3

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLH3

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLH3

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLH3

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLH3

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLH3

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLH3

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLH3

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLH3

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLH3

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLH3

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLH3

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLH3

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLH3

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLH3

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLH3

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLH3

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLH3
}

// H3 returns an HTML element that defines HTML heading.
func H3() HTMLH3 {
	return htmlElement[HTMLH3]{
		tag:           "h3",
		isSelfClosing: false,
	}
}

// HTMLH4 is the interface that describes a <h4> HTML element.
type HTMLH4 interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLH4

	// Body set the content of the element.
	Body(v ...UI) HTMLH4

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLH4

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLH4

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLH4

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLH4

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLH4

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLH4

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLH4

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLH4

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLH4

	// ID specifies a unique id for an element.
	ID(v string) HTMLH4

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLH4

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLH4

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLH4

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLH4

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLH4

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLH4

	// Title specifies extra information about an element.
	Title(v string) HTMLH4

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLH4

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLH4

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLH4

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLH4

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLH4

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLH4

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLH4

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLH4

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLH4

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLH4

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLH4

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLH4

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLH4

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLH4

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLH4

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLH4

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLH4

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLH4

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLH4

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLH4

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLH4

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLH4

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLH4

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLH4

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLH4

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLH4

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLH4

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLH4

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLH4

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLH4

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLH4

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLH4

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLH4
}

// H4 returns an HTML element that defines HTML heading.
func H4() HTMLH4 {
	return htmlElement[HTMLH4]{
		tag:           "h4",
		isSelfClosing: false,
	}
}

// HTMLH5 is the interface that describes a <h5> HTML element.
type HTMLH5 interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLH5

	// Body set the content of the element.
	Body(v ...UI) HTMLH5

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLH5

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLH5

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLH5

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLH5

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLH5

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLH5

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLH5

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLH5

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLH5

	// ID specifies a unique id for an element.
	ID(v string) HTMLH5

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLH5

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLH5

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLH5

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLH5

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLH5

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLH5

	// Title specifies extra information about an element.
	Title(v string) HTMLH5

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLH5

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLH5

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLH5

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLH5

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLH5

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLH5

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLH5

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLH5

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLH5

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLH5

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLH5

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLH5

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLH5

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLH5

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLH5

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLH5

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLH5

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLH5

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLH5

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLH5

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLH5

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLH5

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLH5

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLH5

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLH5

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLH5

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLH5

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLH5

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLH5

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLH5

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLH5

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLH5

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLH5
}

// H5 returns an HTML element that defines HTML heading.
func H5() HTMLH5 {
	return htmlElement[HTMLH5]{
		tag:           "h5",
		isSelfClosing: false,
	}
}

// HTMLH6 is the interface that describes a <h6> HTML element.
type HTMLH6 interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLH6

	// Body set the content of the element.
	Body(v ...UI) HTMLH6

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLH6

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLH6

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLH6

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLH6

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLH6

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLH6

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLH6

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLH6

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLH6

	// ID specifies a unique id for an element.
	ID(v string) HTMLH6

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLH6

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLH6

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLH6

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLH6

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLH6

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLH6

	// Title specifies extra information about an element.
	Title(v string) HTMLH6

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLH6

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLH6

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLH6

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLH6

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLH6

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLH6

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLH6

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLH6

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLH6

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLH6

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLH6

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLH6

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLH6

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLH6

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLH6

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLH6

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLH6

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLH6

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLH6

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLH6

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLH6

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLH6

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLH6

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLH6

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLH6

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLH6

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLH6

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLH6

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLH6

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLH6

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLH6

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLH6

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLH6
}

// H6 returns an HTML element that defines HTML heading.
func H6() HTMLH6 {
	return htmlElement[HTMLH6]{
		tag:           "h6",
		isSelfClosing: false,
	}
}

// HTMLHead is the interface that describes a <head> HTML element.
type HTMLHead interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLHead

	// Body set the content of the element.
	Body(v ...UI) HTMLHead

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLHead

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLHead

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLHead

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLHead

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLHead

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLHead

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLHead

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLHead

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLHead

	// ID specifies a unique id for an element.
	ID(v string) HTMLHead

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLHead

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLHead

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLHead

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLHead

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLHead

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLHead

	// Title specifies extra information about an element.
	Title(v string) HTMLHead

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLHead
}

// Head returns an HTML element that defines information about the document.
func Head() HTMLHead {
	return htmlElement[HTMLHead]{
		tag:           "head",
		isSelfClosing: false,
	}
}

// HTMLHeader is the interface that describes a <header> HTML element.
type HTMLHeader interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLHeader

	// Body set the content of the element.
	Body(v ...UI) HTMLHeader

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLHeader

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLHeader

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLHeader

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLHeader

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLHeader

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLHeader

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLHeader

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLHeader

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLHeader

	// ID specifies a unique id for an element.
	ID(v string) HTMLHeader

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLHeader

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLHeader

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLHeader

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLHeader

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLHeader

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLHeader

	// Title specifies extra information about an element.
	Title(v string) HTMLHeader

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLHeader

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLHeader

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLHeader

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLHeader

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLHeader

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLHeader

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLHeader

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLHeader

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLHeader

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLHeader

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLHeader

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLHeader

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLHeader

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLHeader

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLHeader

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLHeader

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLHeader

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLHeader

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLHeader

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLHeader

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLHeader

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLHeader

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLHeader

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLHeader

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLHeader

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLHeader

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLHeader

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLHeader

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLHeader

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLHeader

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLHeader

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLHeader

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLHeader
}

// Header returns an HTML element that defines a header for a document or section.
func Header() HTMLHeader {
	return htmlElement[HTMLHeader]{
		tag:           "header",
		isSelfClosing: false,
	}
}

// HTMLHr is the interface that describes a <hr> HTML element.
type HTMLHr interface {
	UI

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLHr

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLHr

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLHr

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLHr

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLHr

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLHr

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLHr

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLHr

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLHr

	// ID specifies a unique id for an element.
	ID(v string) HTMLHr

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLHr

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLHr

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLHr

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLHr

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLHr

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLHr

	// Title specifies extra information about an element.
	Title(v string) HTMLHr

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLHr

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLHr

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLHr

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLHr

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLHr

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLHr

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLHr

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLHr

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLHr

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLHr

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLHr

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLHr

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLHr

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLHr

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLHr

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLHr

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLHr

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLHr

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLHr

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLHr

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLHr

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLHr

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLHr

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLHr

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLHr

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLHr

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLHr

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLHr

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLHr

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLHr

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLHr

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLHr

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLHr
}

// Hr returns an HTML element that defines a thematic change in the content.
func Hr() HTMLHr {
	return htmlElement[HTMLHr]{
		tag:           "hr",
		isSelfClosing: true,
	}
}

// HTMLHtml is the interface that describes a <html> HTML element.
type HTMLHtml interface {
	UI

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLHtml

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLHtml

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLHtml

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLHtml

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLHtml

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLHtml

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLHtml

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLHtml

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLHtml

	// ID specifies a unique id for an element.
	ID(v string) HTMLHtml

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLHtml

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLHtml

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLHtml

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLHtml

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLHtml

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLHtml

	// Title specifies extra information about an element.
	Title(v string) HTMLHtml

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLHtml
}

// Html returns an HTML element that defines the root of an HTML document.
func Html() HTMLHtml {
	return htmlElement[HTMLHtml]{
		tag:           "html",
		isSelfClosing: false,
	}
}

// HTMLI is the interface that describes a <i> HTML element.
type HTMLI interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLI

	// Body set the content of the element.
	Body(v ...UI) HTMLI

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLI

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLI

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLI

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLI

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLI

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLI

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLI

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLI

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLI

	// ID specifies a unique id for an element.
	ID(v string) HTMLI

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLI

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLI

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLI

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLI

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLI

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLI

	// Title specifies extra information about an element.
	Title(v string) HTMLI

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLI

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLI

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLI

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLI

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLI

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLI

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLI

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLI

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLI

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLI

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLI

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLI

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLI

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLI

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLI

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLI

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLI

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLI

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLI

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLI

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLI

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLI

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLI

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLI

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLI

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLI

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLI

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLI

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLI

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLI

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLI

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLI

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLI
}

// I returns an HTML element that defines a part of text in an alternate voice or mood.
func I() HTMLI {
	return htmlElement[HTMLI]{
		tag:           "i",
		isSelfClosing: false,
	}
}

// HTMLIFrame is the interface that describes a <iframe> HTML element.
type HTMLIFrame interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLIFrame

	// Body set the content of the element.
	Body(v ...UI) HTMLIFrame

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLIFrame

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLIFrame

	// Allow specifies a feature policy. Can be called multiple times to set multiple policies.
	Allow(v string) HTMLIFrame

	// AllowFullscreen reports whether an iframe can activate fullscreen mode.
	AllowFullscreen(v bool) HTMLIFrame

	// AllowPaymentRequest reports whether an iframe should be allowed to invoke the Payment Request API
	AllowPaymentRequest(v bool) HTMLIFrame

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLIFrame

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLIFrame

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLIFrame

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLIFrame

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLIFrame

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLIFrame

	// Height specifies the height of the element (in pixels).
	Height(v int) HTMLIFrame

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLIFrame

	// ID specifies a unique id for an element.
	ID(v string) HTMLIFrame

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLIFrame

	// Loading indicates how the browser should load the iframe (eager|lazy).
	Loading(v string) HTMLIFrame

	// Name specifies the name of the element.
	Name(v string) HTMLIFrame

	// ReferrerPolicy specifies how much/which referrer information that will be sent when processing the iframe attributes
	ReferrerPolicy(v string) HTMLIFrame

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLIFrame

	// Sandbox enables an extra set of restrictions for the content in an iframe.
	Sandbox(v any) HTMLIFrame

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLIFrame

	// Src specifies the URL of the media file.
	Src(v string) HTMLIFrame

	// SrcDoc specifies the HTML content of the page to show in the iframe.
	SrcDoc(v string) HTMLIFrame

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLIFrame

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLIFrame

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLIFrame

	// Title specifies extra information about an element.
	Title(v string) HTMLIFrame

	// Width specifies the width of the element.
	Width(v int) HTMLIFrame

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLIFrame

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLIFrame

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLIFrame

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLIFrame

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLIFrame

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLIFrame

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLIFrame

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLIFrame

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLIFrame

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLIFrame

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLIFrame

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLIFrame

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLIFrame

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLIFrame

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLIFrame

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLIFrame

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLIFrame

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLIFrame

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLIFrame

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLIFrame

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLIFrame

	// OnLoad calls the given handler after the element is finished loading.
	OnLoad(h EventHandler, scope ...any) HTMLIFrame

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLIFrame

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLIFrame

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLIFrame

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLIFrame

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLIFrame

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLIFrame

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLIFrame

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLIFrame

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLIFrame

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLIFrame

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLIFrame

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLIFrame
}

// IFrame returns an HTML element that defines an inline frame.
func IFrame() HTMLIFrame {
	return htmlElement[HTMLIFrame]{
		tag:           "iframe",
		isSelfClosing: false,
	}
}

// HTMLImg is the interface that describes a <img> HTML element.
type HTMLImg interface {
	UI

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLImg

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLImg

	// Alt specifies an alternate text when the original element fails to display.
	Alt(v string) HTMLImg

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLImg

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLImg

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLImg

	// CrossOrigin sets the mode of the request to an HTTP CORS Request.
	CrossOrigin(v string) HTMLImg

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLImg

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLImg

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLImg

	// Height specifies the height of the element (in pixels).
	Height(v int) HTMLImg

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLImg

	// ID specifies a unique id for an element.
	ID(v string) HTMLImg

	// IsMap specifies an image as a server-side image-map.
	IsMap(v bool) HTMLImg

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLImg

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLImg

	// Sizes specifies the size of the linked resource.
	Sizes(v string) HTMLImg

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLImg

	// Src specifies the URL of the media file.
	Src(v string) HTMLImg

	// SrcSet specifies the URL of the image to use in different situations.
	SrcSet(v string) HTMLImg

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLImg

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLImg

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLImg

	// Title specifies extra information about an element.
	Title(v string) HTMLImg

	// UseMap specifies an image as a client-side image-map.
	UseMap(v string) HTMLImg

	// Width specifies the width of the element.
	Width(v int) HTMLImg

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLImg

	// OnAbort calls the given handler on abort.
	OnAbort(h EventHandler, scope ...any) HTMLImg

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLImg

	// OnCanPlay calls the given handler when a file is ready to start playing (when it has buffered enough to begin).
	OnCanPlay(h EventHandler, scope ...any) HTMLImg

	// OnCanPlayThrough calls the given handler when a file can be played all the way to the end without pausing for buffering.
	OnCanPlayThrough(h EventHandler, scope ...any) HTMLImg

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLImg

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLImg

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLImg

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLImg

	// OnCueChange calls the given handler when the cue changes in a track element.
	OnCueChange(h EventHandler, scope ...any) HTMLImg

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLImg

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLImg

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLImg

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLImg

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLImg

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLImg

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLImg

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLImg

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLImg

	// OnDurationChange calls the given handler when the length of the media changes.
	OnDurationChange(h EventHandler, scope ...any) HTMLImg

	// OnEmptied calls the given handler when something bad happens and the file is suddenly unavailable (like unexpectedly disconnects).
	OnEmptied(h EventHandler, scope ...any) HTMLImg

	// OnEnded calls the given handler when the media has reach the end.
	OnEnded(h EventHandler, scope ...any) HTMLImg

	// OnError calls the given handler when an error occurs.
	OnError(h EventHandler, scope ...any) HTMLImg

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLImg

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLImg

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLImg

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLImg

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLImg

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLImg

	// OnLoad calls the given handler after the element is finished loading.
	OnLoad(h EventHandler, scope ...any) HTMLImg

	// OnLoadStart calls the given handler just as the file begins to load before anything is actually loaded.
	OnLoadStart(h EventHandler, scope ...any) HTMLImg

	// OnLoadedData calls the given handler when media data is loaded.
	OnLoadedData(h EventHandler, scope ...any) HTMLImg

	// OnLoadedMetaData calls the given handler when meta data (like dimensions and duration) are loaded.
	OnLoadedMetaData(h EventHandler, scope ...any) HTMLImg

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLImg

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLImg

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLImg

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLImg

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLImg

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLImg

	// OnPause calls the given handler when the media is paused either by the user or programmatically.
	OnPause(h EventHandler, scope ...any) HTMLImg

	// OnPlay calls the given handler when the media is ready to start playing.
	OnPlay(h EventHandler, scope ...any) HTMLImg

	// OnPlaying calls the given handler when the media actually has started playing.
	OnPlaying(h EventHandler, scope ...any) HTMLImg

	// OnProgress calls the given handler when the browser is in the process of getting the media data.
	OnProgress(h EventHandler, scope ...any) HTMLImg

	// OnRateChange calls the given handler each time the playback rate changes (like when a user switches to a slow motion or fast forward mode).
	OnRateChange(h EventHandler, scope ...any) HTMLImg

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLImg

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLImg

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLImg

	// OnSeeked calls the given handler when the seeking attribute is set to false indicating that seeking has ended.
	OnSeeked(h EventHandler, scope ...any) HTMLImg

	// OnSeeking calls the given handler when the seeking attribute is set to true indicating that seeking is active.
	OnSeeking(h EventHandler, scope ...any) HTMLImg

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLImg

	// OnStalled calls the given handler when the browser is unable to fetch the media data for whatever reason.
	OnStalled(h EventHandler, scope ...any) HTMLImg

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLImg

	// OnSuspend calls the given handler when fetching the media data is stopped before it is completely loaded for whatever reason.
	OnSuspend(h EventHandler, scope ...any) HTMLImg

	// OnTimeUpdate calls the given handler when the playing position has changed (like when the user fast forwards to a different point in the media).
	OnTimeUpdate(h EventHandler, scope ...any) HTMLImg

	// OnVolumeChange calls the given handler each time the volume is changed which (includes setting the volume to "mute").
	OnVolumeChange(h EventHandler, scope ...any) HTMLImg

	// OnWaiting calls the given handler when the media has paused but is expected to resume (like when the media pauses to buffer more data).
	OnWaiting(h EventHandler, scope ...any) HTMLImg

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLImg
}

// Img returns an HTML element that defines an image.
func Img() HTMLImg {
	return htmlElement[HTMLImg]{
		tag:           "img",
		isSelfClosing: true,
	}
}

// HTMLInput is the interface that describes a <input> HTML element.
type HTMLInput interface {
	UI

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLInput

	// Accept specifies the types of files that the server accepts (only for file type).
	Accept(v string) HTMLInput

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLInput

	// Alt specifies an alternate text when the original element fails to display.
	Alt(v string) HTMLInput

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLInput

	// AutoComplete specifies whether the element should have autocomplete enabled.
	AutoComplete(v bool) HTMLInput

	// AutoFocus specifies that the element should automatically get focus when the page loads.
	AutoFocus(v bool) HTMLInput

	// Capture specifies the capture input method in file upload controls
	Capture(v string) HTMLInput

	// Checked specifies that an input element should be pre-selected when the page loads (for checkbox or radio types).
	Checked(v bool) HTMLInput

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLInput

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLInput

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLInput

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLInput

	// DirName specifies that the text direction will be submitted.
	DirName(v string) HTMLInput

	// Disabled specifies that the specified element/group of elements should be disabled.
	Disabled(v bool) HTMLInput

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLInput

	// Form specifies the name of the form the element belongs to.
	Form(v string) HTMLInput

	// FormAction specifies where to send the form-data when a form is submitted. Only for submit type.
	FormAction(v string) HTMLInput

	// FormEncType specifies how form-data should be encoded before sending it to a server. Only for submit type.
	FormEncType(v string) HTMLInput

	// FormMethod specifies how to send the form-data (which HTTP method to use). Only for submit type.
	FormMethod(v string) HTMLInput

	// FormNoValidate specifies that the form-data should not be validated on submission. Only for submit type.
	FormNoValidate(v bool) HTMLInput

	// FormTarget specifies where to display the response after submitting the form. Only for submit type.
	FormTarget(v string) HTMLInput

	// Height specifies the height of the element (in pixels).
	Height(v int) HTMLInput

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLInput

	// ID specifies a unique id for an element.
	ID(v string) HTMLInput

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLInput

	// List refers to a datalist element that contains pre-defined options for an input element.
	List(v string) HTMLInput

	// Max Specifies the maximum value.
	Max(v any) HTMLInput

	// MaxLength specifies the maximum number of characters allowed in an element.
	MaxLength(v int) HTMLInput

	// Min specifies a minimum value.
	Min(v any) HTMLInput

	// Multiple specifies that a user can enter more than one value.
	Multiple(v bool) HTMLInput

	// Name specifies the name of the element.
	Name(v string) HTMLInput

	// Pattern specifies a regular expression that an input element's value is checked against.
	Pattern(v string) HTMLInput

	// Placeholder specifies a short hint that describes the expected value of the element.
	Placeholder(v string) HTMLInput

	// ReadOnly specifies that the element is read-only.
	ReadOnly(v bool) HTMLInput

	// Required specifies that the element must be filled out before submitting the form.
	Required(v bool) HTMLInput

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLInput

	// Size specifies the width.
	Size(v int) HTMLInput

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLInput

	// Src specifies the URL of the media file.
	Src(v string) HTMLInput

	// Step specifies the legal number intervals for an input field.
	Step(v float64) HTMLInput

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLInput

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLInput

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLInput

	// Title specifies extra information about an element.
	Title(v string) HTMLInput

	// Type specifies the type of element.
	Type(v string) HTMLInput

	// Value specifies the value of the element.
	Value(v any) HTMLInput

	// Width specifies the width of the element.
	Width(v int) HTMLInput

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLInput

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLInput

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLInput

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLInput

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLInput

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLInput

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLInput

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLInput

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLInput

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLInput

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLInput

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLInput

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLInput

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLInput

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLInput

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLInput

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLInput

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLInput

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLInput

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLInput

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLInput

	// OnLoad calls the given handler after the element is finished loading.
	OnLoad(h EventHandler, scope ...any) HTMLInput

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLInput

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLInput

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLInput

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLInput

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLInput

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLInput

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLInput

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLInput

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLInput

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLInput

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLInput

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLInput
}

// Input returns an HTML element that defines an input control.
func Input() HTMLInput {
	return htmlElement[HTMLInput]{
		tag:           "input",
		isSelfClosing: true,
	}
}

// HTMLIns is the interface that describes a <ins> HTML element.
type HTMLIns interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLIns

	// Body set the content of the element.
	Body(v ...UI) HTMLIns

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLIns

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLIns

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLIns

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLIns

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLIns

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLIns

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLIns

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLIns

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLIns

	// ID specifies a unique id for an element.
	ID(v string) HTMLIns

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLIns

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLIns

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLIns

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLIns

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLIns

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLIns

	// Title specifies extra information about an element.
	Title(v string) HTMLIns

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLIns

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLIns

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLIns

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLIns

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLIns

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLIns

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLIns

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLIns

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLIns

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLIns

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLIns

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLIns

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLIns

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLIns

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLIns

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLIns

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLIns

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLIns

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLIns

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLIns

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLIns

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLIns

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLIns

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLIns

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLIns

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLIns

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLIns

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLIns

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLIns

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLIns

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLIns

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLIns

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLIns
}

// Ins returns an HTML element that defines a text that has been inserted into a document.
func Ins() HTMLIns {
	return htmlElement[HTMLIns]{
		tag:           "ins",
		isSelfClosing: false,
	}
}

// HTMLKbd is the interface that describes a <kbd> HTML element.
type HTMLKbd interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLKbd

	// Body set the content of the element.
	Body(v ...UI) HTMLKbd

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLKbd

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLKbd

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLKbd

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLKbd

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLKbd

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLKbd

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLKbd

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLKbd

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLKbd

	// ID specifies a unique id for an element.
	ID(v string) HTMLKbd

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLKbd

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLKbd

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLKbd

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLKbd

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLKbd

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLKbd

	// Title specifies extra information about an element.
	Title(v string) HTMLKbd

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLKbd

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLKbd

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLKbd

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLKbd

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLKbd

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLKbd

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLKbd

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLKbd

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLKbd

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLKbd

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLKbd

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLKbd

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLKbd

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLKbd

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLKbd

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLKbd

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLKbd

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLKbd

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLKbd

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLKbd

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLKbd

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLKbd

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLKbd

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLKbd

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLKbd

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLKbd

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLKbd

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLKbd

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLKbd

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLKbd

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLKbd

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLKbd

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLKbd
}

// Kbd returns an HTML element that defines keyboard input.
func Kbd() HTMLKbd {
	return htmlElement[HTMLKbd]{
		tag:           "kbd",
		isSelfClosing: false,
	}
}

// HTMLLabel is the interface that describes a <label> HTML element.
type HTMLLabel interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLLabel

	// Body set the content of the element.
	Body(v ...UI) HTMLLabel

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLLabel

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLLabel

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLLabel

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLLabel

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLLabel

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLLabel

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLLabel

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLLabel

	// For specifies which form element(s) a label/calculation is bound to.
	For(v string) HTMLLabel

	// Form specifies the name of the form the element belongs to.
	Form(v string) HTMLLabel

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLLabel

	// ID specifies a unique id for an element.
	ID(v string) HTMLLabel

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLLabel

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLLabel

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLLabel

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLLabel

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLLabel

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLLabel

	// Title specifies extra information about an element.
	Title(v string) HTMLLabel

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLLabel

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLLabel

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLLabel

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLLabel

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLLabel

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLLabel

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLLabel

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLLabel

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLLabel

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLLabel

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLLabel

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLLabel

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLLabel

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLLabel

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLLabel

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLLabel

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLLabel

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLLabel

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLLabel

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLLabel

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLLabel

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLLabel

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLLabel

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLLabel

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLLabel

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLLabel

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLLabel

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLLabel

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLLabel

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLLabel

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLLabel

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLLabel

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLLabel
}

// Label returns an HTML element that defines a label for an input element.
func Label() HTMLLabel {
	return htmlElement[HTMLLabel]{
		tag:           "label",
		isSelfClosing: false,
	}
}

// HTMLLegend is the interface that describes a <legend> HTML element.
type HTMLLegend interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLLegend

	// Body set the content of the element.
	Body(v ...UI) HTMLLegend

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLLegend

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLLegend

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLLegend

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLLegend

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLLegend

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLLegend

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLLegend

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLLegend

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLLegend

	// ID specifies a unique id for an element.
	ID(v string) HTMLLegend

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLLegend

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLLegend

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLLegend

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLLegend

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLLegend

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLLegend

	// Title specifies extra information about an element.
	Title(v string) HTMLLegend

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLLegend

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLLegend

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLLegend

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLLegend

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLLegend

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLLegend

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLLegend

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLLegend

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLLegend

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLLegend

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLLegend

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLLegend

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLLegend

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLLegend

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLLegend

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLLegend

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLLegend

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLLegend

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLLegend

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLLegend

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLLegend

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLLegend

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLLegend

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLLegend

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLLegend

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLLegend

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLLegend

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLLegend

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLLegend

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLLegend

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLLegend

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLLegend

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLLegend
}

// Legend returns an HTML element that defines a caption for a fieldset element.
func Legend() HTMLLegend {
	return htmlElement[HTMLLegend]{
		tag:           "legend",
		isSelfClosing: false,
	}
}

// HTMLLi is the interface that describes a <li> HTML element.
type HTMLLi interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLLi

	// Body set the content of the element.
	Body(v ...UI) HTMLLi

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLLi

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLLi

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLLi

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLLi

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLLi

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLLi

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLLi

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLLi

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLLi

	// ID specifies a unique id for an element.
	ID(v string) HTMLLi

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLLi

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLLi

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLLi

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLLi

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLLi

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLLi

	// Title specifies extra information about an element.
	Title(v string) HTMLLi

	// Value specifies the value of the element.
	Value(v any) HTMLLi

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLLi

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLLi

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLLi

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLLi

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLLi

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLLi

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLLi

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLLi

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLLi

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLLi

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLLi

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLLi

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLLi

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLLi

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLLi

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLLi

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLLi

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLLi

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLLi

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLLi

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLLi

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLLi

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLLi

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLLi

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLLi

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLLi

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLLi

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLLi

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLLi

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLLi

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLLi

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLLi

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLLi
}

// Li returns an HTML element that defines a list item.
func Li() HTMLLi {
	return htmlElement[HTMLLi]{
		tag:           "li",
		isSelfClosing: false,
	}
}

// HTMLLink is the interface that describes a <link> HTML element.
type HTMLLink interface {
	UI

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLLink

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLLink

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLLink

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLLink

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLLink

	// CrossOrigin sets the mode of the request to an HTTP CORS Request.
	CrossOrigin(v string) HTMLLink

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLLink

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLLink

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLLink

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLLink

	// Href specifies the URL of the page the link goes to.
	Href(v string) HTMLLink

	// HrefLang specifies the language of the linked document.
	HrefLang(v string) HTMLLink

	// ID specifies a unique id for an element.
	ID(v string) HTMLLink

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLLink

	// Media specifies what media/device the linked document is optimized for.
	Media(v string) HTMLLink

	// Rel specifies the relationship between the current document and the linked document.
	Rel(v string) HTMLLink

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLLink

	// Sizes specifies the size of the linked resource.
	Sizes(v string) HTMLLink

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLLink

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLLink

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLLink

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLLink

	// Title specifies extra information about an element.
	Title(v string) HTMLLink

	// Type specifies the type of element.
	Type(v string) HTMLLink

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLLink

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLLink

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLLink

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLLink

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLLink

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLLink

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLLink

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLLink

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLLink

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLLink

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLLink

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLLink

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLLink

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLLink

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLLink

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLLink

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLLink

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLLink

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLLink

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLLink

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLLink

	// OnLoad calls the given handler after the element is finished loading.
	OnLoad(h EventHandler, scope ...any) HTMLLink

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLLink

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLLink

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLLink

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLLink

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLLink

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLLink

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLLink

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLLink

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLLink

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLLink

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLLink

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLLink
}

// Link returns an HTML element that defines the relationship between a document and an external resource (most used to link to style sheets).
func Link() HTMLLink {
	return htmlElement[HTMLLink]{
		tag:           "link",
		isSelfClosing: true,
	}
}

// HTMLMain is the interface that describes a <main> HTML element.
type HTMLMain interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLMain

	// Body set the content of the element.
	Body(v ...UI) HTMLMain

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLMain

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLMain

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLMain

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLMain

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLMain

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLMain

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLMain

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLMain

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLMain

	// ID specifies a unique id for an element.
	ID(v string) HTMLMain

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLMain

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLMain

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLMain

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLMain

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLMain

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLMain

	// Title specifies extra information about an element.
	Title(v string) HTMLMain

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLMain

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLMain

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLMain

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLMain

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLMain

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLMain

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLMain

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLMain

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLMain

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLMain

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLMain

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLMain

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLMain

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLMain

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLMain

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLMain

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLMain

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLMain

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLMain

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLMain

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLMain

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLMain

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLMain

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLMain

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLMain

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLMain

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLMain

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLMain

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLMain

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLMain

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLMain

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLMain

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLMain
}

// Main returns an HTML element that specifies the main content of a document.
func Main() HTMLMain {
	return htmlElement[HTMLMain]{
		tag:           "main",
		isSelfClosing: false,
	}
}

// HTMLMap is the interface that describes a <map> HTML element.
type HTMLMap interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLMap

	// Body set the content of the element.
	Body(v ...UI) HTMLMap

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLMap

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLMap

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLMap

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLMap

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLMap

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLMap

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLMap

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLMap

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLMap

	// ID specifies a unique id for an element.
	ID(v string) HTMLMap

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLMap

	// Name specifies the name of the element.
	Name(v string) HTMLMap

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLMap

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLMap

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLMap

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLMap

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLMap

	// Title specifies extra information about an element.
	Title(v string) HTMLMap

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLMap

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLMap

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLMap

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLMap

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLMap

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLMap

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLMap

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLMap

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLMap

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLMap

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLMap

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLMap

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLMap

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLMap

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLMap

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLMap

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLMap

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLMap

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLMap

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLMap

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLMap

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLMap

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLMap

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLMap

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLMap

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLMap

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLMap

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLMap

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLMap

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLMap

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLMap

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLMap

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLMap
}

// Map returns an HTML element that defines a client-side image-map.
func Map() HTMLMap {
	return htmlElement[HTMLMap]{
		tag:           "map",
		isSelfClosing: false,
	}
}

// HTMLMark is the interface that describes a <mark> HTML element.
type HTMLMark interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLMark

	// Body set the content of the element.
	Body(v ...UI) HTMLMark

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLMark

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLMark

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLMark

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLMark

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLMark

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLMark

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLMark

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLMark

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLMark

	// ID specifies a unique id for an element.
	ID(v string) HTMLMark

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLMark

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLMark

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLMark

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLMark

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLMark

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLMark

	// Title specifies extra information about an element.
	Title(v string) HTMLMark

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLMark

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLMark

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLMark

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLMark

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLMark

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLMark

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLMark

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLMark

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLMark

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLMark

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLMark

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLMark

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLMark

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLMark

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLMark

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLMark

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLMark

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLMark

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLMark

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLMark

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLMark

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLMark

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLMark

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLMark

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLMark

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLMark

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLMark

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLMark

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLMark

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLMark

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLMark

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLMark

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLMark
}

// Mark returns an HTML element that defines marked/highlighted text.
func Mark() HTMLMark {
	return htmlElement[HTMLMark]{
		tag:           "mark",
		isSelfClosing: false,
	}
}

// HTMLMeta is the interface that describes a <meta> HTML element.
type HTMLMeta interface {
	UI

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLMeta

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLMeta

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLMeta

	// Charset specifies the character encoding.
	Charset(v string) HTMLMeta

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLMeta

	// Content gives the value associated with the http-equiv or name attribute.
	Content(v string) HTMLMeta

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLMeta

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLMeta

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLMeta

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLMeta

	// HTTPEquiv provides an HTTP header for the information/value of the content attribute.
	HTTPEquiv(v string) HTMLMeta

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLMeta

	// ID specifies a unique id for an element.
	ID(v string) HTMLMeta

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLMeta

	// Name specifies the name of the element.
	Name(v string) HTMLMeta

	// Property specifies the property name.
	Property(v string) HTMLMeta

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLMeta

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLMeta

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLMeta

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLMeta

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLMeta

	// Title specifies extra information about an element.
	Title(v string) HTMLMeta

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLMeta
}

// Meta returns an HTML element that .
func Meta() HTMLMeta {
	return htmlElement[HTMLMeta]{
		tag:           "meta",
		isSelfClosing: true,
	}
}

// HTMLMeter is the interface that describes a <meter> HTML element.
type HTMLMeter interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLMeter

	// Body set the content of the element.
	Body(v ...UI) HTMLMeter

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLMeter

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLMeter

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLMeter

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLMeter

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLMeter

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLMeter

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLMeter

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLMeter

	// Form specifies the name of the form the element belongs to.
	Form(v string) HTMLMeter

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLMeter

	// High specifies the range that is considered to be a high value.
	High(v float64) HTMLMeter

	// ID specifies a unique id for an element.
	ID(v string) HTMLMeter

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLMeter

	// Low specifies the range that is considered to be a low value.
	Low(v float64) HTMLMeter

	// Max Specifies the maximum value.
	Max(v any) HTMLMeter

	// Min specifies a minimum value.
	Min(v any) HTMLMeter

	// Optimum specifies what value is the optimal value for the gauge.
	Optimum(v float64) HTMLMeter

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLMeter

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLMeter

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLMeter

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLMeter

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLMeter

	// Title specifies extra information about an element.
	Title(v string) HTMLMeter

	// Value specifies the value of the element.
	Value(v any) HTMLMeter

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLMeter

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLMeter

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLMeter

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLMeter

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLMeter

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLMeter

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLMeter

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLMeter

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLMeter

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLMeter

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLMeter

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLMeter

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLMeter

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLMeter

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLMeter

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLMeter

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLMeter

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLMeter

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLMeter

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLMeter

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLMeter

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLMeter

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLMeter

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLMeter

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLMeter

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLMeter

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLMeter

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLMeter

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLMeter

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLMeter

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLMeter

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLMeter

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLMeter
}

// Meter returns an HTML element that defines a scalar measurement within a known range (a gauge).
func Meter() HTMLMeter {
	return htmlElement[HTMLMeter]{
		tag:           "meter",
		isSelfClosing: false,
	}
}

// HTMLNav is the interface that describes a <nav> HTML element.
type HTMLNav interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLNav

	// Body set the content of the element.
	Body(v ...UI) HTMLNav

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLNav

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLNav

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLNav

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLNav

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLNav

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLNav

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLNav

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLNav

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLNav

	// ID specifies a unique id for an element.
	ID(v string) HTMLNav

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLNav

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLNav

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLNav

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLNav

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLNav

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLNav

	// Title specifies extra information about an element.
	Title(v string) HTMLNav

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLNav

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLNav

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLNav

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLNav

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLNav

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLNav

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLNav

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLNav

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLNav

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLNav

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLNav

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLNav

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLNav

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLNav

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLNav

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLNav

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLNav

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLNav

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLNav

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLNav

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLNav

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLNav

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLNav

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLNav

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLNav

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLNav

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLNav

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLNav

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLNav

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLNav

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLNav

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLNav

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLNav
}

// Nav returns an HTML element that defines navigation links.
func Nav() HTMLNav {
	return htmlElement[HTMLNav]{
		tag:           "nav",
		isSelfClosing: false,
	}
}

// HTMLNoScript is the interface that describes a <noscript> HTML element.
type HTMLNoScript interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLNoScript

	// Body set the content of the element.
	Body(v ...UI) HTMLNoScript

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLNoScript

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLNoScript

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLNoScript

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLNoScript

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLNoScript

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLNoScript

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLNoScript

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLNoScript

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLNoScript

	// ID specifies a unique id for an element.
	ID(v string) HTMLNoScript

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLNoScript

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLNoScript

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLNoScript

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLNoScript

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLNoScript

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLNoScript

	// Title specifies extra information about an element.
	Title(v string) HTMLNoScript

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLNoScript
}

// NoScript returns an HTML element that defines an alternate content for users that do not support client-side scripts.
func NoScript() HTMLNoScript {
	return htmlElement[HTMLNoScript]{
		tag:           "noscript",
		isSelfClosing: false,
	}
}

// HTMLObject is the interface that describes a <object> HTML element.
type HTMLObject interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLObject

	// Body set the content of the element.
	Body(v ...UI) HTMLObject

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLObject

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLObject

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLObject

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLObject

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLObject

	// Data specifies the URL of the resource to be used by the object.
	Data(v string) HTMLObject

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLObject

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLObject

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLObject

	// Form specifies the name of the form the element belongs to.
	Form(v string) HTMLObject

	// Height specifies the height of the element (in pixels).
	Height(v int) HTMLObject

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLObject

	// ID specifies a unique id for an element.
	ID(v string) HTMLObject

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLObject

	// Name specifies the name of the element.
	Name(v string) HTMLObject

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLObject

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLObject

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLObject

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLObject

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLObject

	// Title specifies extra information about an element.
	Title(v string) HTMLObject

	// Type specifies the type of element.
	Type(v string) HTMLObject

	// UseMap specifies an image as a client-side image-map.
	UseMap(v string) HTMLObject

	// Width specifies the width of the element.
	Width(v int) HTMLObject

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLObject

	// OnAbort calls the given handler on abort.
	OnAbort(h EventHandler, scope ...any) HTMLObject

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLObject

	// OnCanPlay calls the given handler when a file is ready to start playing (when it has buffered enough to begin).
	OnCanPlay(h EventHandler, scope ...any) HTMLObject

	// OnCanPlayThrough calls the given handler when a file can be played all the way to the end without pausing for buffering.
	OnCanPlayThrough(h EventHandler, scope ...any) HTMLObject

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLObject

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLObject

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLObject

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLObject

	// OnCueChange calls the given handler when the cue changes in a track element.
	OnCueChange(h EventHandler, scope ...any) HTMLObject

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLObject

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLObject

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLObject

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLObject

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLObject

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLObject

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLObject

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLObject

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLObject

	// OnDurationChange calls the given handler when the length of the media changes.
	OnDurationChange(h EventHandler, scope ...any) HTMLObject

	// OnEmptied calls the given handler when something bad happens and the file is suddenly unavailable (like unexpectedly disconnects).
	OnEmptied(h EventHandler, scope ...any) HTMLObject

	// OnEnded calls the given handler when the media has reach the end.
	OnEnded(h EventHandler, scope ...any) HTMLObject

	// OnError calls the given handler when an error occurs.
	OnError(h EventHandler, scope ...any) HTMLObject

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLObject

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLObject

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLObject

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLObject

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLObject

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLObject

	// OnLoadStart calls the given handler just as the file begins to load before anything is actually loaded.
	OnLoadStart(h EventHandler, scope ...any) HTMLObject

	// OnLoadedData calls the given handler when media data is loaded.
	OnLoadedData(h EventHandler, scope ...any) HTMLObject

	// OnLoadedMetaData calls the given handler when meta data (like dimensions and duration) are loaded.
	OnLoadedMetaData(h EventHandler, scope ...any) HTMLObject

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLObject

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLObject

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLObject

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLObject

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLObject

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLObject

	// OnPause calls the given handler when the media is paused either by the user or programmatically.
	OnPause(h EventHandler, scope ...any) HTMLObject

	// OnPlay calls the given handler when the media is ready to start playing.
	OnPlay(h EventHandler, scope ...any) HTMLObject

	// OnPlaying calls the given handler when the media actually has started playing.
	OnPlaying(h EventHandler, scope ...any) HTMLObject

	// OnProgress calls the given handler when the browser is in the process of getting the media data.
	OnProgress(h EventHandler, scope ...any) HTMLObject

	// OnRateChange calls the given handler each time the playback rate changes (like when a user switches to a slow motion or fast forward mode).
	OnRateChange(h EventHandler, scope ...any) HTMLObject

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLObject

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLObject

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLObject

	// OnSeeked calls the given handler when the seeking attribute is set to false indicating that seeking has ended.
	OnSeeked(h EventHandler, scope ...any) HTMLObject

	// OnSeeking calls the given handler when the seeking attribute is set to true indicating that seeking is active.
	OnSeeking(h EventHandler, scope ...any) HTMLObject

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLObject

	// OnStalled calls the given handler when the browser is unable to fetch the media data for whatever reason.
	OnStalled(h EventHandler, scope ...any) HTMLObject

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLObject

	// OnSuspend calls the given handler when fetching the media data is stopped before it is completely loaded for whatever reason.
	OnSuspend(h EventHandler, scope ...any) HTMLObject

	// OnTimeUpdate calls the given handler when the playing position has changed (like when the user fast forwards to a different point in the media).
	OnTimeUpdate(h EventHandler, scope ...any) HTMLObject

	// OnVolumeChange calls the given handler each time the volume is changed which (includes setting the volume to "mute").
	OnVolumeChange(h EventHandler, scope ...any) HTMLObject

	// OnWaiting calls the given handler when the media has paused but is expected to resume (like when the media pauses to buffer more data).
	OnWaiting(h EventHandler, scope ...any) HTMLObject

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLObject
}

// Object returns an HTML element that defines an embedded object.
func Object() HTMLObject {
	return htmlElement[HTMLObject]{
		tag:           "object",
		isSelfClosing: false,
	}
}

// HTMLOl is the interface that describes a <ol> HTML element.
type HTMLOl interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLOl

	// Body set the content of the element.
	Body(v ...UI) HTMLOl

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLOl

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLOl

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLOl

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLOl

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLOl

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLOl

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLOl

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLOl

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLOl

	// ID specifies a unique id for an element.
	ID(v string) HTMLOl

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLOl

	// Reversed specifies that the list order should be descending (9,8,7...).
	Reversed(v bool) HTMLOl

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLOl

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLOl

	// Start specifies the start value of the ordered list.
	Start(v int) HTMLOl

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLOl

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLOl

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLOl

	// Title specifies extra information about an element.
	Title(v string) HTMLOl

	// Type specifies the type of element.
	Type(v string) HTMLOl

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLOl

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLOl

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLOl

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLOl

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLOl

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLOl

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLOl

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLOl

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLOl

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLOl

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLOl

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLOl

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLOl

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLOl

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLOl

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLOl

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLOl

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLOl

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLOl

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLOl

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLOl

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLOl

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLOl

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLOl

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLOl

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLOl

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLOl

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLOl

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLOl

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLOl

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLOl

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLOl

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLOl
}

// Ol returns an HTML element that defines an ordered list.
func Ol() HTMLOl {
	return htmlElement[HTMLOl]{
		tag:           "ol",
		isSelfClosing: false,
	}
}

// HTMLOptGroup is the interface that describes a <optgroup> HTML element.
type HTMLOptGroup interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLOptGroup

	// Body set the content of the element.
	Body(v ...UI) HTMLOptGroup

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLOptGroup

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLOptGroup

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLOptGroup

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLOptGroup

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLOptGroup

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLOptGroup

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLOptGroup

	// Disabled specifies that the specified element/group of elements should be disabled.
	Disabled(v bool) HTMLOptGroup

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLOptGroup

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLOptGroup

	// ID specifies a unique id for an element.
	ID(v string) HTMLOptGroup

	// Label specifies a shorter label for the option.
	Label(v string) HTMLOptGroup

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLOptGroup

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLOptGroup

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLOptGroup

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLOptGroup

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLOptGroup

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLOptGroup

	// Title specifies extra information about an element.
	Title(v string) HTMLOptGroup

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLOptGroup

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLOptGroup

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLOptGroup

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLOptGroup

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLOptGroup

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLOptGroup

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLOptGroup

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLOptGroup

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLOptGroup

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLOptGroup

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLOptGroup

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLOptGroup

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLOptGroup

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLOptGroup

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLOptGroup

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLOptGroup

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLOptGroup

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLOptGroup

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLOptGroup

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLOptGroup

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLOptGroup

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLOptGroup

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLOptGroup

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLOptGroup

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLOptGroup

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLOptGroup

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLOptGroup

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLOptGroup

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLOptGroup

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLOptGroup

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLOptGroup

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLOptGroup

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLOptGroup
}

// OptGroup returns an HTML element that defines a group of related options in a drop-down list.
func OptGroup() HTMLOptGroup {
	return htmlElement[HTMLOptGroup]{
		tag:           "optgroup",
		isSelfClosing: false,
	}
}

// HTMLOption is the interface that describes a <option> HTML element.
type HTMLOption interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLOption

	// Body set the content of the element.
	Body(v ...UI) HTMLOption

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLOption

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLOption

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLOption

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLOption

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLOption

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLOption

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLOption

	// Disabled specifies that the specified element/group of elements should be disabled.
	Disabled(v bool) HTMLOption

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLOption

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLOption

	// ID specifies a unique id for an element.
	ID(v string) HTMLOption

	// Label specifies a shorter label for the option.
	Label(v string) HTMLOption

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLOption

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLOption

	// Selected specifies that an option should be pre-selected when the page loads.
	Selected(v bool) HTMLOption

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLOption

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLOption

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLOption

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLOption

	// Title specifies extra information about an element.
	Title(v string) HTMLOption

	// Value specifies the value of the element.
	Value(v any) HTMLOption

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLOption

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLOption

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLOption

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLOption

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLOption

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLOption

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLOption

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLOption

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLOption

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLOption

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLOption

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLOption

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLOption

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLOption

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLOption

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLOption

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLOption

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLOption

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLOption

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLOption

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLOption

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLOption

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLOption

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLOption

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLOption

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLOption

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLOption

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLOption

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLOption

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLOption

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLOption

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLOption

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLOption
}

// Option returns an HTML element that defines an option in a drop-down list.
func Option() HTMLOption {
	return htmlElement[HTMLOption]{
		tag:           "option",
		isSelfClosing: false,
	}
}

// HTMLOutput is the interface that describes a <output> HTML element.
type HTMLOutput interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLOutput

	// Body set the content of the element.
	Body(v ...UI) HTMLOutput

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLOutput

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLOutput

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLOutput

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLOutput

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLOutput

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLOutput

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLOutput

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLOutput

	// For specifies which form element(s) a label/calculation is bound to.
	For(v string) HTMLOutput

	// Form specifies the name of the form the element belongs to.
	Form(v string) HTMLOutput

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLOutput

	// ID specifies a unique id for an element.
	ID(v string) HTMLOutput

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLOutput

	// Name specifies the name of the element.
	Name(v string) HTMLOutput

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLOutput

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLOutput

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLOutput

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLOutput

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLOutput

	// Title specifies extra information about an element.
	Title(v string) HTMLOutput

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLOutput

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLOutput

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLOutput

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLOutput

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLOutput

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLOutput

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLOutput

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLOutput

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLOutput

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLOutput

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLOutput

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLOutput

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLOutput

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLOutput

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLOutput

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLOutput

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLOutput

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLOutput

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLOutput

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLOutput

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLOutput

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLOutput

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLOutput

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLOutput

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLOutput

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLOutput

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLOutput

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLOutput

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLOutput

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLOutput

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLOutput

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLOutput

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLOutput
}

// Output returns an HTML element that .
func Output() HTMLOutput {
	return htmlElement[HTMLOutput]{
		tag:           "output",
		isSelfClosing: false,
	}
}

// HTMLP is the interface that describes a <p> HTML element.
type HTMLP interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLP

	// Body set the content of the element.
	Body(v ...UI) HTMLP

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLP

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLP

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLP

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLP

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLP

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLP

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLP

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLP

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLP

	// ID specifies a unique id for an element.
	ID(v string) HTMLP

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLP

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLP

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLP

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLP

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLP

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLP

	// Title specifies extra information about an element.
	Title(v string) HTMLP

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLP

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLP

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLP

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLP

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLP

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLP

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLP

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLP

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLP

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLP

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLP

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLP

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLP

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLP

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLP

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLP

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLP

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLP

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLP

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLP

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLP

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLP

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLP

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLP

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLP

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLP

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLP

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLP

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLP

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLP

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLP

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLP

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLP
}

// P returns an HTML element that defines a paragraph.
func P() HTMLP {
	return htmlElement[HTMLP]{
		tag:           "p",
		isSelfClosing: false,
	}
}

// HTMLParam is the interface that describes a <param> HTML element.
type HTMLParam interface {
	UI

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLParam

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLParam

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLParam

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLParam

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLParam

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLParam

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLParam

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLParam

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLParam

	// ID specifies a unique id for an element.
	ID(v string) HTMLParam

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLParam

	// Name specifies the name of the element.
	Name(v string) HTMLParam

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLParam

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLParam

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLParam

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLParam

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLParam

	// Title specifies extra information about an element.
	Title(v string) HTMLParam

	// Value specifies the value of the element.
	Value(v any) HTMLParam

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLParam

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLParam

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLParam

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLParam

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLParam

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLParam

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLParam

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLParam

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLParam

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLParam

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLParam

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLParam

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLParam

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLParam

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLParam

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLParam

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLParam

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLParam

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLParam

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLParam

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLParam

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLParam

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLParam

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLParam

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLParam

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLParam

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLParam

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLParam

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLParam

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLParam

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLParam

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLParam

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLParam
}

// Param returns an HTML element that defines a parameter for an object.
func Param() HTMLParam {
	return htmlElement[HTMLParam]{
		tag:           "param",
		isSelfClosing: true,
	}
}

// HTMLPicture is the interface that describes a <picture> HTML element.
type HTMLPicture interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLPicture

	// Body set the content of the element.
	Body(v ...UI) HTMLPicture

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLPicture

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLPicture

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLPicture

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLPicture

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLPicture

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLPicture

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLPicture

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLPicture

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLPicture

	// ID specifies a unique id for an element.
	ID(v string) HTMLPicture

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLPicture

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLPicture

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLPicture

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLPicture

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLPicture

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLPicture

	// Title specifies extra information about an element.
	Title(v string) HTMLPicture

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLPicture

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLPicture

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLPicture

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLPicture

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLPicture

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLPicture

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLPicture

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLPicture

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLPicture

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLPicture

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLPicture

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLPicture

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLPicture

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLPicture

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLPicture

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLPicture

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLPicture

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLPicture

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLPicture

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLPicture

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLPicture

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLPicture

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLPicture

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLPicture

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLPicture

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLPicture

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLPicture

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLPicture

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLPicture

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLPicture

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLPicture

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLPicture

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLPicture
}

// Picture returns an HTML element that defines a container for multiple image resources.
func Picture() HTMLPicture {
	return htmlElement[HTMLPicture]{
		tag:           "picture",
		isSelfClosing: false,
	}
}

// HTMLPre is the interface that describes a <pre> HTML element.
type HTMLPre interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLPre

	// Body set the content of the element.
	Body(v ...UI) HTMLPre

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLPre

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLPre

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLPre

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLPre

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLPre

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLPre

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLPre

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLPre

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLPre

	// ID specifies a unique id for an element.
	ID(v string) HTMLPre

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLPre

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLPre

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLPre

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLPre

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLPre

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLPre

	// Title specifies extra information about an element.
	Title(v string) HTMLPre

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLPre

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLPre

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLPre

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLPre

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLPre

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLPre

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLPre

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLPre

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLPre

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLPre

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLPre

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLPre

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLPre

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLPre

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLPre

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLPre

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLPre

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLPre

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLPre

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLPre

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLPre

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLPre

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLPre

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLPre

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLPre

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLPre

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLPre

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLPre

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLPre

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLPre

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLPre

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLPre

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLPre
}

// Pre returns an HTML element that defines preformatted text.
func Pre() HTMLPre {
	return htmlElement[HTMLPre]{
		tag:           "pre",
		isSelfClosing: false,
	}
}

// HTMLProgress is the interface that describes a <progress> HTML element.
type HTMLProgress interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLProgress

	// Body set the content of the element.
	Body(v ...UI) HTMLProgress

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLProgress

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLProgress

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLProgress

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLProgress

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLProgress

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLProgress

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLProgress

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLProgress

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLProgress

	// ID specifies a unique id for an element.
	ID(v string) HTMLProgress

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLProgress

	// Max Specifies the maximum value.
	Max(v any) HTMLProgress

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLProgress

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLProgress

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLProgress

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLProgress

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLProgress

	// Title specifies extra information about an element.
	Title(v string) HTMLProgress

	// Value specifies the value of the element.
	Value(v any) HTMLProgress

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLProgress

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLProgress

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLProgress

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLProgress

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLProgress

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLProgress

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLProgress

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLProgress

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLProgress

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLProgress

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLProgress

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLProgress

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLProgress

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLProgress

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLProgress

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLProgress

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLProgress

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLProgress

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLProgress

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLProgress

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLProgress

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLProgress

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLProgress

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLProgress

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLProgress

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLProgress

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLProgress

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLProgress

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLProgress

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLProgress

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLProgress

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLProgress

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLProgress
}

// Progress returns an HTML element that represents the progress of a task.
func Progress() HTMLProgress {
	return htmlElement[HTMLProgress]{
		tag:           "progress",
		isSelfClosing: false,
	}
}

// HTMLQ is the interface that describes a <q> HTML element.
type HTMLQ interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLQ

	// Body set the content of the element.
	Body(v ...UI) HTMLQ

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLQ

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLQ

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLQ

	// Cite specifies a URL which explains the quote/deleted/inserted text.
	Cite(v string) HTMLQ

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLQ

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLQ

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLQ

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLQ

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLQ

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLQ

	// ID specifies a unique id for an element.
	ID(v string) HTMLQ

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLQ

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLQ

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLQ

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLQ

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLQ

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLQ

	// Title specifies extra information about an element.
	Title(v string) HTMLQ

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLQ

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLQ

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLQ

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLQ

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLQ

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLQ

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLQ

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLQ

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLQ

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLQ

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLQ

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLQ

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLQ

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLQ

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLQ

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLQ

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLQ

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLQ

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLQ

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLQ

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLQ

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLQ

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLQ

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLQ

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLQ

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLQ

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLQ

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLQ

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLQ

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLQ

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLQ

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLQ

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLQ
}

// Q returns an HTML element that defines a short quotation.
func Q() HTMLQ {
	return htmlElement[HTMLQ]{
		tag:           "q",
		isSelfClosing: false,
	}
}

// HTMLRp is the interface that describes a <rp> HTML element.
type HTMLRp interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLRp

	// Body set the content of the element.
	Body(v ...UI) HTMLRp

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLRp

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLRp

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLRp

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLRp

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLRp

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLRp

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLRp

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLRp

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLRp

	// ID specifies a unique id for an element.
	ID(v string) HTMLRp

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLRp

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLRp

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLRp

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLRp

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLRp

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLRp

	// Title specifies extra information about an element.
	Title(v string) HTMLRp

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLRp

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLRp

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLRp

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLRp

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLRp

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLRp

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLRp

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLRp

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLRp

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLRp

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLRp

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLRp

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLRp

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLRp

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLRp

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLRp

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLRp

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLRp

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLRp

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLRp

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLRp

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLRp

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLRp

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLRp

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLRp

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLRp

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLRp

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLRp

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLRp

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLRp

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLRp

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLRp

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLRp
}

// Rp returns an HTML element that defines what to show in browsers that do not support ruby annotations.
func Rp() HTMLRp {
	return htmlElement[HTMLRp]{
		tag:           "rp",
		isSelfClosing: false,
	}
}

// HTMLRt is the interface that describes a <rt> HTML element.
type HTMLRt interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLRt

	// Body set the content of the element.
	Body(v ...UI) HTMLRt

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLRt

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLRt

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLRt

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLRt

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLRt

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLRt

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLRt

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLRt

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLRt

	// ID specifies a unique id for an element.
	ID(v string) HTMLRt

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLRt

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLRt

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLRt

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLRt

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLRt

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLRt

	// Title specifies extra information about an element.
	Title(v string) HTMLRt

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLRt

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLRt

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLRt

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLRt

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLRt

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLRt

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLRt

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLRt

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLRt

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLRt

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLRt

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLRt

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLRt

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLRt

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLRt

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLRt

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLRt

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLRt

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLRt

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLRt

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLRt

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLRt

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLRt

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLRt

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLRt

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLRt

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLRt

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLRt

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLRt

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLRt

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLRt

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLRt

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLRt
}

// Rt returns an HTML element that defines an explanation/pronunciation of characters (for East Asian typography).
func Rt() HTMLRt {
	return htmlElement[HTMLRt]{
		tag:           "rt",
		isSelfClosing: false,
	}
}

// HTMLRuby is the interface that describes a <ruby> HTML element.
type HTMLRuby interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLRuby

	// Body set the content of the element.
	Body(v ...UI) HTMLRuby

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLRuby

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLRuby

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLRuby

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLRuby

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLRuby

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLRuby

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLRuby

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLRuby

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLRuby

	// ID specifies a unique id for an element.
	ID(v string) HTMLRuby

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLRuby

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLRuby

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLRuby

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLRuby

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLRuby

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLRuby

	// Title specifies extra information about an element.
	Title(v string) HTMLRuby

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLRuby

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLRuby

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLRuby

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLRuby

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLRuby

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLRuby

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLRuby

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLRuby

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLRuby

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLRuby

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLRuby

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLRuby

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLRuby

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLRuby

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLRuby

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLRuby

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLRuby

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLRuby

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLRuby

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLRuby

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLRuby

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLRuby

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLRuby

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLRuby

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLRuby

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLRuby

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLRuby

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLRuby

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLRuby

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLRuby

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLRuby

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLRuby

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLRuby
}

// Ruby returns an HTML element that defines a ruby annotation (for East Asian typography).
func Ruby() HTMLRuby {
	return htmlElement[HTMLRuby]{
		tag:           "ruby",
		isSelfClosing: false,
	}
}

// HTMLS is the interface that describes a <s> HTML element.
type HTMLS interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLS

	// Body set the content of the element.
	Body(v ...UI) HTMLS

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLS

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLS

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLS

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLS

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLS

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLS

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLS

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLS

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLS

	// ID specifies a unique id for an element.
	ID(v string) HTMLS

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLS

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLS

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLS

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLS

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLS

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLS

	// Title specifies extra information about an element.
	Title(v string) HTMLS

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLS

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLS

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLS

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLS

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLS

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLS

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLS

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLS

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLS

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLS

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLS

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLS

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLS

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLS

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLS

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLS

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLS

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLS

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLS

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLS

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLS

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLS

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLS

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLS

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLS

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLS

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLS

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLS

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLS

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLS

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLS

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLS

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLS
}

// S returns an HTML element that Defines text that is no longer correct.
func S() HTMLS {
	return htmlElement[HTMLS]{
		tag:           "s",
		isSelfClosing: false,
	}
}

// HTMLSamp is the interface that describes a <samp> HTML element.
type HTMLSamp interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLSamp

	// Body set the content of the element.
	Body(v ...UI) HTMLSamp

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLSamp

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLSamp

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLSamp

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLSamp

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLSamp

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLSamp

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLSamp

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLSamp

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLSamp

	// ID specifies a unique id for an element.
	ID(v string) HTMLSamp

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLSamp

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLSamp

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLSamp

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLSamp

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLSamp

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLSamp

	// Title specifies extra information about an element.
	Title(v string) HTMLSamp

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLSamp

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLSamp

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLSamp

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLSamp

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLSamp

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLSamp

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLSamp

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLSamp

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLSamp

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLSamp

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLSamp

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLSamp

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLSamp

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLSamp

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLSamp

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLSamp

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLSamp

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLSamp

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLSamp

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLSamp

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLSamp

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLSamp

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLSamp

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLSamp

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLSamp

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLSamp

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLSamp

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLSamp

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLSamp

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLSamp

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLSamp

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLSamp

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLSamp
}

// Samp returns an HTML element that defines sample output from a computer program.
func Samp() HTMLSamp {
	return htmlElement[HTMLSamp]{
		tag:           "samp",
		isSelfClosing: false,
	}
}

// HTMLScript is the interface that describes a <script> HTML element.
type HTMLScript interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLScript

	// Body set the content of the element.
	Body(v ...UI) HTMLScript

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLScript

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLScript

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLScript

	// Async specifies that the script is executed asynchronously (only for external scripts).
	Async(v bool) HTMLScript

	// Charset specifies the character encoding.
	Charset(v string) HTMLScript

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLScript

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLScript

	// CrossOrigin sets the mode of the request to an HTTP CORS Request.
	CrossOrigin(v string) HTMLScript

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLScript

	// Defer specifies that the script is executed when the page has finished parsing (only for external scripts).
	Defer(v bool) HTMLScript

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLScript

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLScript

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLScript

	// ID specifies a unique id for an element.
	ID(v string) HTMLScript

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLScript

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLScript

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLScript

	// Src specifies the URL of the media file.
	Src(v string) HTMLScript

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLScript

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLScript

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLScript

	// Title specifies extra information about an element.
	Title(v string) HTMLScript

	// Type specifies the type of element.
	Type(v string) HTMLScript

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLScript

	// OnLoad calls the given handler after the element is finished loading.
	OnLoad(h EventHandler, scope ...any) HTMLScript
}

// Script returns an HTML element that defines a client-side script.
func Script() HTMLScript {
	return htmlElement[HTMLScript]{
		tag:           "script",
		isSelfClosing: false,
	}
}

// HTMLSection is the interface that describes a <section> HTML element.
type HTMLSection interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLSection

	// Body set the content of the element.
	Body(v ...UI) HTMLSection

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLSection

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLSection

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLSection

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLSection

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLSection

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLSection

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLSection

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLSection

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLSection

	// ID specifies a unique id for an element.
	ID(v string) HTMLSection

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLSection

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLSection

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLSection

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLSection

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLSection

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLSection

	// Title specifies extra information about an element.
	Title(v string) HTMLSection

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLSection

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLSection

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLSection

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLSection

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLSection

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLSection

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLSection

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLSection

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLSection

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLSection

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLSection

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLSection

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLSection

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLSection

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLSection

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLSection

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLSection

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLSection

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLSection

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLSection

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLSection

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLSection

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLSection

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLSection

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLSection

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLSection

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLSection

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLSection

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLSection

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLSection

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLSection

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLSection

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLSection
}

// Section returns an HTML element that defines a section in a document.
func Section() HTMLSection {
	return htmlElement[HTMLSection]{
		tag:           "section",
		isSelfClosing: false,
	}
}

// HTMLSelect is the interface that describes a <select> HTML element.
type HTMLSelect interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLSelect

	// Body set the content of the element.
	Body(v ...UI) HTMLSelect

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLSelect

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLSelect

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLSelect

	// AutoFocus specifies that the element should automatically get focus when the page loads.
	AutoFocus(v bool) HTMLSelect

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLSelect

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLSelect

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLSelect

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLSelect

	// Disabled specifies that the specified element/group of elements should be disabled.
	Disabled(v bool) HTMLSelect

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLSelect

	// Form specifies the name of the form the element belongs to.
	Form(v string) HTMLSelect

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLSelect

	// ID specifies a unique id for an element.
	ID(v string) HTMLSelect

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLSelect

	// Multiple specifies that a user can enter more than one value.
	Multiple(v bool) HTMLSelect

	// Name specifies the name of the element.
	Name(v string) HTMLSelect

	// Required specifies that the element must be filled out before submitting the form.
	Required(v bool) HTMLSelect

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLSelect

	// Size specifies the width.
	Size(v int) HTMLSelect

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLSelect

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLSelect

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLSelect

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLSelect

	// Title specifies extra information about an element.
	Title(v string) HTMLSelect

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLSelect

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLSelect

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLSelect

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLSelect

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLSelect

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLSelect

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLSelect

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLSelect

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLSelect

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLSelect

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLSelect

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLSelect

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLSelect

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLSelect

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLSelect

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLSelect

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLSelect

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLSelect

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLSelect

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLSelect

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLSelect

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLSelect

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLSelect

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLSelect

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLSelect

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLSelect

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLSelect

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLSelect

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLSelect

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLSelect

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLSelect

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLSelect

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLSelect
}

// Select returns an HTML element that defines a drop-down list.
func Select() HTMLSelect {
	return htmlElement[HTMLSelect]{
		tag:           "select",
		isSelfClosing: false,
	}
}

// HTMLSmall is the interface that describes a <small> HTML element.
type HTMLSmall interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLSmall

	// Body set the content of the element.
	Body(v ...UI) HTMLSmall

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLSmall

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLSmall

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLSmall

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLSmall

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLSmall

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLSmall

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLSmall

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLSmall

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLSmall

	// ID specifies a unique id for an element.
	ID(v string) HTMLSmall

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLSmall

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLSmall

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLSmall

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLSmall

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLSmall

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLSmall

	// Title specifies extra information about an element.
	Title(v string) HTMLSmall

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLSmall

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLSmall

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLSmall

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLSmall

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLSmall

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLSmall

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLSmall

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLSmall

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLSmall

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLSmall

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLSmall

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLSmall

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLSmall

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLSmall

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLSmall

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLSmall

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLSmall

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLSmall

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLSmall

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLSmall

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLSmall

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLSmall

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLSmall

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLSmall

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLSmall

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLSmall

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLSmall

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLSmall

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLSmall

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLSmall

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLSmall

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLSmall

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLSmall
}

// Small returns an HTML element that defines smaller text.
func Small() HTMLSmall {
	return htmlElement[HTMLSmall]{
		tag:           "small",
		isSelfClosing: false,
	}
}

// HTMLSource is the interface that describes a <source> HTML element.
type HTMLSource interface {
	UI

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLSource

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLSource

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLSource

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLSource

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLSource

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLSource

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLSource

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLSource

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLSource

	// ID specifies a unique id for an element.
	ID(v string) HTMLSource

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLSource

	// Media specifies what media/device the linked document is optimized for.
	Media(v string) HTMLSource

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLSource

	// Sizes specifies the size of the linked resource.
	Sizes(v string) HTMLSource

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLSource

	// Src specifies the URL of the media file.
	Src(v string) HTMLSource

	// SrcSet specifies the URL of the image to use in different situations.
	SrcSet(v string) HTMLSource

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLSource

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLSource

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLSource

	// Title specifies extra information about an element.
	Title(v string) HTMLSource

	// Type specifies the type of element.
	Type(v string) HTMLSource

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLSource

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLSource

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLSource

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLSource

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLSource

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLSource

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLSource

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLSource

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLSource

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLSource

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLSource

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLSource

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLSource

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLSource

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLSource

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLSource

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLSource

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLSource

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLSource

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLSource

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLSource

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLSource

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLSource

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLSource

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLSource

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLSource

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLSource

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLSource

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLSource

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLSource

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLSource

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLSource

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLSource
}

// Source returns an HTML element that .
func Source() HTMLSource {
	return htmlElement[HTMLSource]{
		tag:           "source",
		isSelfClosing: true,
	}
}

// HTMLSpan is the interface that describes a <span> HTML element.
type HTMLSpan interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLSpan

	// Body set the content of the element.
	Body(v ...UI) HTMLSpan

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLSpan

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLSpan

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLSpan

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLSpan

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLSpan

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLSpan

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLSpan

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLSpan

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLSpan

	// ID specifies a unique id for an element.
	ID(v string) HTMLSpan

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLSpan

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLSpan

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLSpan

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLSpan

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLSpan

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLSpan

	// Title specifies extra information about an element.
	Title(v string) HTMLSpan

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLSpan

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLSpan

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLSpan

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLSpan

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLSpan

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLSpan

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLSpan

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLSpan

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLSpan

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLSpan

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLSpan

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLSpan

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLSpan

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLSpan

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLSpan

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLSpan

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLSpan

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLSpan

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLSpan

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLSpan

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLSpan

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLSpan

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLSpan

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLSpan

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLSpan

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLSpan

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLSpan

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLSpan

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLSpan

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLSpan

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLSpan

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLSpan

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLSpan
}

// Span returns an HTML element that defines a section in a document.
func Span() HTMLSpan {
	return htmlElement[HTMLSpan]{
		tag:           "span",
		isSelfClosing: false,
	}
}

// HTMLStrong is the interface that describes a <strong> HTML element.
type HTMLStrong interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLStrong

	// Body set the content of the element.
	Body(v ...UI) HTMLStrong

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLStrong

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLStrong

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLStrong

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLStrong

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLStrong

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLStrong

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLStrong

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLStrong

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLStrong

	// ID specifies a unique id for an element.
	ID(v string) HTMLStrong

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLStrong

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLStrong

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLStrong

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLStrong

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLStrong

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLStrong

	// Title specifies extra information about an element.
	Title(v string) HTMLStrong

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLStrong

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLStrong

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLStrong

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLStrong

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLStrong

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLStrong

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLStrong

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLStrong

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLStrong

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLStrong

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLStrong

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLStrong

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLStrong

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLStrong

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLStrong

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLStrong

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLStrong

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLStrong

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLStrong

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLStrong

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLStrong

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLStrong

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLStrong

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLStrong

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLStrong

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLStrong

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLStrong

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLStrong

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLStrong

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLStrong

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLStrong

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLStrong

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLStrong
}

// Strong returns an HTML element that defines important text.
func Strong() HTMLStrong {
	return htmlElement[HTMLStrong]{
		tag:           "strong",
		isSelfClosing: false,
	}
}

// HTMLStyle is the interface that describes a <style> HTML element.
type HTMLStyle interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLStyle

	// Body set the content of the element.
	Body(v ...UI) HTMLStyle

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLStyle

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLStyle

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLStyle

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLStyle

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLStyle

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLStyle

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLStyle

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLStyle

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLStyle

	// ID specifies a unique id for an element.
	ID(v string) HTMLStyle

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLStyle

	// Media specifies what media/device the linked document is optimized for.
	Media(v string) HTMLStyle

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLStyle

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLStyle

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLStyle

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLStyle

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLStyle

	// Title specifies extra information about an element.
	Title(v string) HTMLStyle

	// Type specifies the type of element.
	Type(v string) HTMLStyle

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLStyle

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLStyle

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLStyle

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLStyle

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLStyle

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLStyle

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLStyle

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLStyle

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLStyle

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLStyle

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLStyle

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLStyle

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLStyle

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLStyle

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLStyle

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLStyle

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLStyle

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLStyle

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLStyle

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLStyle

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLStyle

	// OnLoad calls the given handler after the element is finished loading.
	OnLoad(h EventHandler, scope ...any) HTMLStyle

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLStyle

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLStyle

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLStyle

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLStyle

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLStyle

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLStyle

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLStyle

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLStyle

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLStyle

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLStyle

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLStyle

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLStyle
}

// Style returns an HTML element that defines style information for a document.
func Style() HTMLStyle {
	return htmlElement[HTMLStyle]{
		tag:           "style",
		isSelfClosing: false,
	}
}

// HTMLSub is the interface that describes a <sub> HTML element.
type HTMLSub interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLSub

	// Body set the content of the element.
	Body(v ...UI) HTMLSub

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLSub

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLSub

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLSub

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLSub

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLSub

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLSub

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLSub

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLSub

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLSub

	// ID specifies a unique id for an element.
	ID(v string) HTMLSub

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLSub

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLSub

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLSub

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLSub

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLSub

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLSub

	// Title specifies extra information about an element.
	Title(v string) HTMLSub

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLSub

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLSub

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLSub

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLSub

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLSub

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLSub

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLSub

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLSub

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLSub

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLSub

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLSub

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLSub

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLSub

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLSub

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLSub

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLSub

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLSub

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLSub

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLSub

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLSub

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLSub

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLSub

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLSub

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLSub

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLSub

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLSub

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLSub

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLSub

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLSub

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLSub

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLSub

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLSub

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLSub
}

// Sub returns an HTML element that defines subscripted text.
func Sub() HTMLSub {
	return htmlElement[HTMLSub]{
		tag:           "sub",
		isSelfClosing: false,
	}
}

// HTMLSummary is the interface that describes a <summary> HTML element.
type HTMLSummary interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLSummary

	// Body set the content of the element.
	Body(v ...UI) HTMLSummary

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLSummary

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLSummary

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLSummary

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLSummary

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLSummary

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLSummary

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLSummary

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLSummary

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLSummary

	// ID specifies a unique id for an element.
	ID(v string) HTMLSummary

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLSummary

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLSummary

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLSummary

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLSummary

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLSummary

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLSummary

	// Title specifies extra information about an element.
	Title(v string) HTMLSummary

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLSummary

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLSummary

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLSummary

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLSummary

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLSummary

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLSummary

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLSummary

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLSummary

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLSummary

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLSummary

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLSummary

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLSummary

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLSummary

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLSummary

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLSummary

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLSummary

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLSummary

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLSummary

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLSummary

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLSummary

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLSummary

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLSummary

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLSummary

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLSummary

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLSummary

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLSummary

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLSummary

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLSummary

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLSummary

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLSummary

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLSummary

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLSummary

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLSummary
}

// Summary returns an HTML element that defines a visible heading for a details element.
func Summary() HTMLSummary {
	return htmlElement[HTMLSummary]{
		tag:           "summary",
		isSelfClosing: false,
	}
}

// HTMLSup is the interface that describes a <sup> HTML element.
type HTMLSup interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLSup

	// Body set the content of the element.
	Body(v ...UI) HTMLSup

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLSup

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLSup

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLSup

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLSup

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLSup

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLSup

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLSup

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLSup

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLSup

	// ID specifies a unique id for an element.
	ID(v string) HTMLSup

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLSup

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLSup

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLSup

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLSup

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLSup

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLSup

	// Title specifies extra information about an element.
	Title(v string) HTMLSup

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLSup

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLSup

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLSup

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLSup

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLSup

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLSup

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLSup

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLSup

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLSup

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLSup

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLSup

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLSup

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLSup

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLSup

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLSup

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLSup

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLSup

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLSup

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLSup

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLSup

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLSup

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLSup

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLSup

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLSup

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLSup

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLSup

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLSup

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLSup

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLSup

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLSup

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLSup

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLSup

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLSup
}

// Sup returns an HTML element that defines superscripted text.
func Sup() HTMLSup {
	return htmlElement[HTMLSup]{
		tag:           "sup",
		isSelfClosing: false,
	}
}

// HTMLTable is the interface that describes a <table> HTML element.
type HTMLTable interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLTable

	// Body set the content of the element.
	Body(v ...UI) HTMLTable

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLTable

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLTable

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLTable

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLTable

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLTable

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLTable

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLTable

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLTable

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLTable

	// ID specifies a unique id for an element.
	ID(v string) HTMLTable

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLTable

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLTable

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLTable

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLTable

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLTable

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLTable

	// Title specifies extra information about an element.
	Title(v string) HTMLTable

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLTable

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLTable

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLTable

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLTable

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLTable

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLTable

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLTable

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLTable

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLTable

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLTable

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLTable

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLTable

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLTable

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLTable

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLTable

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLTable

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLTable

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLTable

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLTable

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLTable

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLTable

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLTable

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLTable

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLTable

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLTable

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLTable

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLTable

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLTable

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLTable

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLTable

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLTable

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLTable

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLTable
}

// Table returns an HTML element that defines a table.
func Table() HTMLTable {
	return htmlElement[HTMLTable]{
		tag:           "table",
		isSelfClosing: false,
	}
}

// HTMLTBody is the interface that describes a <tbody> HTML element.
type HTMLTBody interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLTBody

	// Body set the content of the element.
	Body(v ...UI) HTMLTBody

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLTBody

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLTBody

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLTBody

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLTBody

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLTBody

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLTBody

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLTBody

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLTBody

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLTBody

	// ID specifies a unique id for an element.
	ID(v string) HTMLTBody

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLTBody

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLTBody

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLTBody

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLTBody

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLTBody

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLTBody

	// Title specifies extra information about an element.
	Title(v string) HTMLTBody

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLTBody

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLTBody

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLTBody

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLTBody

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLTBody

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLTBody

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLTBody

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLTBody

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLTBody

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLTBody

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLTBody

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLTBody

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLTBody

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLTBody

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLTBody

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLTBody

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLTBody

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLTBody

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLTBody

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLTBody

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLTBody

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLTBody

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLTBody

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLTBody

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLTBody

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLTBody

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLTBody

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLTBody

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLTBody

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLTBody

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLTBody

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLTBody

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLTBody
}

// TBody returns an HTML element that groups the body content in a table.
func TBody() HTMLTBody {
	return htmlElement[HTMLTBody]{
		tag:           "tbody",
		isSelfClosing: false,
	}
}

// HTMLTd is the interface that describes a <td> HTML element.
type HTMLTd interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLTd

	// Body set the content of the element.
	Body(v ...UI) HTMLTd

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLTd

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLTd

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLTd

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLTd

	// ColSpan specifies the number of columns a table cell should span.
	ColSpan(v int) HTMLTd

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLTd

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLTd

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLTd

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLTd

	// Headers specifies one or more headers cells a cell is related to.
	Headers(v string) HTMLTd

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLTd

	// ID specifies a unique id for an element.
	ID(v string) HTMLTd

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLTd

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLTd

	// Rowspan specifies the number of rows a table cell should span.
	Rowspan(v int) HTMLTd

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLTd

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLTd

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLTd

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLTd

	// Title specifies extra information about an element.
	Title(v string) HTMLTd

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLTd

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLTd

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLTd

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLTd

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLTd

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLTd

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLTd

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLTd

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLTd

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLTd

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLTd

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLTd

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLTd

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLTd

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLTd

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLTd

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLTd

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLTd

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLTd

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLTd

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLTd

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLTd

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLTd

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLTd

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLTd

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLTd

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLTd

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLTd

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLTd

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLTd

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLTd

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLTd

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLTd
}

// Td returns an HTML element that defines a cell in a table.
func Td() HTMLTd {
	return htmlElement[HTMLTd]{
		tag:           "td",
		isSelfClosing: false,
	}
}

// HTMLTemplate is the interface that describes a <template> HTML element.
type HTMLTemplate interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLTemplate

	// Body set the content of the element.
	Body(v ...UI) HTMLTemplate

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLTemplate

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLTemplate

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLTemplate

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLTemplate

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLTemplate

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLTemplate

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLTemplate

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLTemplate

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLTemplate

	// ID specifies a unique id for an element.
	ID(v string) HTMLTemplate

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLTemplate

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLTemplate

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLTemplate

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLTemplate

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLTemplate

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLTemplate

	// Title specifies extra information about an element.
	Title(v string) HTMLTemplate

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLTemplate
}

// Template returns an HTML element that defines a template.
func Template() HTMLTemplate {
	return htmlElement[HTMLTemplate]{
		tag:           "template",
		isSelfClosing: false,
	}
}

// HTMLTextarea is the interface that describes a <textarea> HTML element.
type HTMLTextarea interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLTextarea

	// Body set the content of the element.
	Body(v ...UI) HTMLTextarea

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLTextarea

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLTextarea

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLTextarea

	// AutoFocus specifies that the element should automatically get focus when the page loads.
	AutoFocus(v bool) HTMLTextarea

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLTextarea

	// Cols specifies the visible width of a text area.
	Cols(v int) HTMLTextarea

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLTextarea

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLTextarea

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLTextarea

	// DirName specifies that the text direction will be submitted.
	DirName(v string) HTMLTextarea

	// Disabled specifies that the specified element/group of elements should be disabled.
	Disabled(v bool) HTMLTextarea

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLTextarea

	// Form specifies the name of the form the element belongs to.
	Form(v string) HTMLTextarea

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLTextarea

	// ID specifies a unique id for an element.
	ID(v string) HTMLTextarea

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLTextarea

	// MaxLength specifies the maximum number of characters allowed in an element.
	MaxLength(v int) HTMLTextarea

	// Name specifies the name of the element.
	Name(v string) HTMLTextarea

	// Placeholder specifies a short hint that describes the expected value of the element.
	Placeholder(v string) HTMLTextarea

	// ReadOnly specifies that the element is read-only.
	ReadOnly(v bool) HTMLTextarea

	// Required specifies that the element must be filled out before submitting the form.
	Required(v bool) HTMLTextarea

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLTextarea

	// Rows specifies the visible number of lines in a text area.
	Rows(v int) HTMLTextarea

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLTextarea

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLTextarea

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLTextarea

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLTextarea

	// Title specifies extra information about an element.
	Title(v string) HTMLTextarea

	// Wrap specifies how the text in a text area is to be wrapped when submitted in a form.
	Wrap(v string) HTMLTextarea

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLTextarea

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLTextarea

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLTextarea

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLTextarea

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLTextarea

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLTextarea

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLTextarea

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLTextarea

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLTextarea

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLTextarea

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLTextarea

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLTextarea

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLTextarea

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLTextarea

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLTextarea

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLTextarea

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLTextarea

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLTextarea

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLTextarea

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLTextarea

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLTextarea

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLTextarea

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLTextarea

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLTextarea

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLTextarea

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLTextarea

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLTextarea

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLTextarea

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLTextarea

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLTextarea

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLTextarea

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLTextarea

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLTextarea
}

// Textarea returns an HTML element that defines a multiline input control (text area).
func Textarea() HTMLTextarea {
	return htmlElement[HTMLTextarea]{
		tag:           "textarea",
		isSelfClosing: false,
	}
}

// HTMLTFoot is the interface that describes a <tfoot> HTML element.
type HTMLTFoot interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLTFoot

	// Body set the content of the element.
	Body(v ...UI) HTMLTFoot

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLTFoot

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLTFoot

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLTFoot

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLTFoot

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLTFoot

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLTFoot

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLTFoot

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLTFoot

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLTFoot

	// ID specifies a unique id for an element.
	ID(v string) HTMLTFoot

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLTFoot

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLTFoot

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLTFoot

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLTFoot

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLTFoot

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLTFoot

	// Title specifies extra information about an element.
	Title(v string) HTMLTFoot

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLTFoot

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLTFoot

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLTFoot

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLTFoot

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLTFoot

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLTFoot

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLTFoot

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLTFoot

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLTFoot

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLTFoot

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLTFoot

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLTFoot

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLTFoot

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLTFoot

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLTFoot

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLTFoot

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLTFoot

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLTFoot

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLTFoot

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLTFoot

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLTFoot

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLTFoot

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLTFoot

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLTFoot

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLTFoot

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLTFoot

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLTFoot

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLTFoot

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLTFoot

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLTFoot

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLTFoot

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLTFoot

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLTFoot
}

// TFoot returns an HTML element that groups the footer content in a table.
func TFoot() HTMLTFoot {
	return htmlElement[HTMLTFoot]{
		tag:           "tfoot",
		isSelfClosing: false,
	}
}

// HTMLTh is the interface that describes a <th> HTML element.
type HTMLTh interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLTh

	// Body set the content of the element.
	Body(v ...UI) HTMLTh

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLTh

	// Abbr specifies an abbreviated version of the content in a header cell.
	Abbr(v string) HTMLTh

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLTh

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLTh

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLTh

	// ColSpan specifies the number of columns a table cell should span.
	ColSpan(v int) HTMLTh

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLTh

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLTh

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLTh

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLTh

	// Headers specifies one or more headers cells a cell is related to.
	Headers(v string) HTMLTh

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLTh

	// ID specifies a unique id for an element.
	ID(v string) HTMLTh

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLTh

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLTh

	// Rowspan specifies the number of rows a table cell should span.
	Rowspan(v int) HTMLTh

	// Scope specifies whether a header cell is a header for a column, row, or group of columns or rows.
	Scope(v string) HTMLTh

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLTh

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLTh

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLTh

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLTh

	// Title specifies extra information about an element.
	Title(v string) HTMLTh

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLTh

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLTh

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLTh

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLTh

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLTh

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLTh

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLTh

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLTh

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLTh

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLTh

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLTh

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLTh

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLTh

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLTh

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLTh

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLTh

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLTh

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLTh

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLTh

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLTh

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLTh

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLTh

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLTh

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLTh

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLTh

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLTh

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLTh

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLTh

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLTh

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLTh

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLTh

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLTh

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLTh
}

// Th returns an HTML element that defines a header cell in a table.
func Th() HTMLTh {
	return htmlElement[HTMLTh]{
		tag:           "th",
		isSelfClosing: false,
	}
}

// HTMLTHead is the interface that describes a <thead> HTML element.
type HTMLTHead interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLTHead

	// Body set the content of the element.
	Body(v ...UI) HTMLTHead

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLTHead

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLTHead

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLTHead

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLTHead

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLTHead

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLTHead

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLTHead

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLTHead

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLTHead

	// ID specifies a unique id for an element.
	ID(v string) HTMLTHead

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLTHead

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLTHead

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLTHead

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLTHead

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLTHead

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLTHead

	// Title specifies extra information about an element.
	Title(v string) HTMLTHead

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLTHead

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLTHead

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLTHead

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLTHead

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLTHead

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLTHead

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLTHead

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLTHead

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLTHead

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLTHead

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLTHead

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLTHead

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLTHead

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLTHead

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLTHead

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLTHead

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLTHead

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLTHead

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLTHead

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLTHead

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLTHead

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLTHead

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLTHead

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLTHead

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLTHead

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLTHead

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLTHead

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLTHead

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLTHead

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLTHead

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLTHead

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLTHead

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLTHead
}

// THead returns an HTML element that groups the header content in a table
func THead() HTMLTHead {
	return htmlElement[HTMLTHead]{
		tag:           "thead",
		isSelfClosing: false,
	}
}

// HTMLTime is the interface that describes a <time> HTML element.
type HTMLTime interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLTime

	// Body set the content of the element.
	Body(v ...UI) HTMLTime

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLTime

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLTime

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLTime

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLTime

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLTime

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLTime

	// DateTime specifies the date and time.
	DateTime(v string) HTMLTime

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLTime

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLTime

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLTime

	// ID specifies a unique id for an element.
	ID(v string) HTMLTime

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLTime

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLTime

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLTime

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLTime

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLTime

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLTime

	// Title specifies extra information about an element.
	Title(v string) HTMLTime

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLTime

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLTime

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLTime

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLTime

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLTime

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLTime

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLTime

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLTime

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLTime

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLTime

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLTime

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLTime

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLTime

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLTime

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLTime

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLTime

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLTime

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLTime

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLTime

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLTime

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLTime

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLTime

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLTime

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLTime

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLTime

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLTime

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLTime

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLTime

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLTime

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLTime

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLTime

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLTime

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLTime
}

// Time returns an HTML element that defines a date/time.
func Time() HTMLTime {
	return htmlElement[HTMLTime]{
		tag:           "time",
		isSelfClosing: false,
	}
}

// HTMLTitle is the interface that describes a <title> HTML element.
type HTMLTitle interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLTitle

	// Body set the content of the element.
	Body(v ...UI) HTMLTitle

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLTitle

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLTitle

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLTitle

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLTitle

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLTitle

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLTitle

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLTitle

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLTitle

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLTitle

	// ID specifies a unique id for an element.
	ID(v string) HTMLTitle

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLTitle

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLTitle

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLTitle

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLTitle

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLTitle

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLTitle

	// Title specifies extra information about an element.
	Title(v string) HTMLTitle

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLTitle
}

// Title returns an HTML element that defines a title for the document.
func Title() HTMLTitle {
	return htmlElement[HTMLTitle]{
		tag:           "title",
		isSelfClosing: false,
	}
}

// HTMLTr is the interface that describes a <tr> HTML element.
type HTMLTr interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLTr

	// Body set the content of the element.
	Body(v ...UI) HTMLTr

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLTr

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLTr

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLTr

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLTr

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLTr

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLTr

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLTr

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLTr

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLTr

	// ID specifies a unique id for an element.
	ID(v string) HTMLTr

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLTr

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLTr

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLTr

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLTr

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLTr

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLTr

	// Title specifies extra information about an element.
	Title(v string) HTMLTr

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLTr

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLTr

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLTr

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLTr

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLTr

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLTr

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLTr

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLTr

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLTr

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLTr

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLTr

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLTr

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLTr

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLTr

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLTr

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLTr

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLTr

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLTr

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLTr

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLTr

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLTr

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLTr

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLTr

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLTr

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLTr

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLTr

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLTr

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLTr

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLTr

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLTr

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLTr

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLTr

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLTr
}

// Tr returns an HTML element that defines a row in a table.
func Tr() HTMLTr {
	return htmlElement[HTMLTr]{
		tag:           "tr",
		isSelfClosing: false,
	}
}

// HTMLU is the interface that describes a <u> HTML element.
type HTMLU interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLU

	// Body set the content of the element.
	Body(v ...UI) HTMLU

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLU

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLU

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLU

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLU

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLU

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLU

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLU

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLU

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLU

	// ID specifies a unique id for an element.
	ID(v string) HTMLU

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLU

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLU

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLU

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLU

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLU

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLU

	// Title specifies extra information about an element.
	Title(v string) HTMLU

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLU

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLU

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLU

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLU

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLU

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLU

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLU

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLU

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLU

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLU

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLU

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLU

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLU

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLU

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLU

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLU

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLU

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLU

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLU

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLU

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLU

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLU

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLU

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLU

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLU

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLU

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLU

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLU

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLU

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLU

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLU

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLU

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLU
}

// U returns an HTML element that defines text that should be stylistically different from normal text.
func U() HTMLU {
	return htmlElement[HTMLU]{
		tag:           "u",
		isSelfClosing: false,
	}
}

// HTMLUl is the interface that describes a <ul> HTML element.
type HTMLUl interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLUl

	// Body set the content of the element.
	Body(v ...UI) HTMLUl

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLUl

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLUl

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLUl

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLUl

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLUl

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLUl

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLUl

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLUl

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLUl

	// ID specifies a unique id for an element.
	ID(v string) HTMLUl

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLUl

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLUl

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLUl

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLUl

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLUl

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLUl

	// Title specifies extra information about an element.
	Title(v string) HTMLUl

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLUl

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLUl

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLUl

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLUl

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLUl

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLUl

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLUl

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLUl

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLUl

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLUl

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLUl

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLUl

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLUl

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLUl

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLUl

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLUl

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLUl

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLUl

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLUl

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLUl

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLUl

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLUl

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLUl

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLUl

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLUl

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLUl

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLUl

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLUl

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLUl

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLUl

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLUl

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLUl

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLUl
}

// Ul returns an HTML element that defines an unordered list.
func Ul() HTMLUl {
	return htmlElement[HTMLUl]{
		tag:           "ul",
		isSelfClosing: false,
	}
}

// HTMLVar is the interface that describes a <var> HTML element.
type HTMLVar interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLVar

	// Body set the content of the element.
	Body(v ...UI) HTMLVar

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLVar

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLVar

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLVar

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLVar

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLVar

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLVar

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLVar

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLVar

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLVar

	// ID specifies a unique id for an element.
	ID(v string) HTMLVar

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLVar

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLVar

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLVar

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLVar

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLVar

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLVar

	// Title specifies extra information about an element.
	Title(v string) HTMLVar

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLVar

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLVar

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLVar

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLVar

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLVar

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLVar

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLVar

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLVar

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLVar

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLVar

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLVar

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLVar

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLVar

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLVar

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLVar

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLVar

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLVar

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLVar

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLVar

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLVar

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLVar

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLVar

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLVar

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLVar

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLVar

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLVar

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLVar

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLVar

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLVar

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLVar

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLVar

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLVar

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLVar
}

// Var returns an HTML element that defines a variable.
func Var() HTMLVar {
	return htmlElement[HTMLVar]{
		tag:           "var",
		isSelfClosing: false,
	}
}

// HTMLVideo is the interface that describes a <video> HTML element.
type HTMLVideo interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLVideo

	// Body set the content of the element.
	Body(v ...UI) HTMLVideo

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLVideo

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLVideo

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLVideo

	// AutoPlay specifies that the audio/video will start playing as soon as it is ready.
	AutoPlay(v bool) HTMLVideo

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLVideo

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLVideo

	// Controls specifies that audio/video controls should be displayed (such as a play/pause button etc).
	Controls(v bool) HTMLVideo

	// CrossOrigin sets the mode of the request to an HTTP CORS Request.
	CrossOrigin(v string) HTMLVideo

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLVideo

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLVideo

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLVideo

	// Height specifies the height of the element (in pixels).
	Height(v int) HTMLVideo

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLVideo

	// ID specifies a unique id for an element.
	ID(v string) HTMLVideo

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLVideo

	// Loop specifies that the audio/video will start over again, every time it is finished.
	Loop(v bool) HTMLVideo

	// Muted specifies that the audio output of the video should be muted.
	Muted(v bool) HTMLVideo

	// Poster specifies an image to be shown while the video is downloading, or until the user hits the play button.
	Poster(v string) HTMLVideo

	// Preload specifies if and how the author thinks the audio/video should be loaded when the page loads.
	Preload(v string) HTMLVideo

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLVideo

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLVideo

	// Src specifies the URL of the media file.
	Src(v string) HTMLVideo

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLVideo

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLVideo

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLVideo

	// Title specifies extra information about an element.
	Title(v string) HTMLVideo

	// Width specifies the width of the element.
	Width(v int) HTMLVideo

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLVideo

	// OnAbort calls the given handler on abort.
	OnAbort(h EventHandler, scope ...any) HTMLVideo

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLVideo

	// OnCanPlay calls the given handler when a file is ready to start playing (when it has buffered enough to begin).
	OnCanPlay(h EventHandler, scope ...any) HTMLVideo

	// OnCanPlayThrough calls the given handler when a file can be played all the way to the end without pausing for buffering.
	OnCanPlayThrough(h EventHandler, scope ...any) HTMLVideo

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLVideo

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLVideo

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLVideo

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLVideo

	// OnCueChange calls the given handler when the cue changes in a track element.
	OnCueChange(h EventHandler, scope ...any) HTMLVideo

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLVideo

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLVideo

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLVideo

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLVideo

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLVideo

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLVideo

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLVideo

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLVideo

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLVideo

	// OnDurationChange calls the given handler when the length of the media changes.
	OnDurationChange(h EventHandler, scope ...any) HTMLVideo

	// OnEmptied calls the given handler when something bad happens and the file is suddenly unavailable (like unexpectedly disconnects).
	OnEmptied(h EventHandler, scope ...any) HTMLVideo

	// OnEnded calls the given handler when the media has reach the end.
	OnEnded(h EventHandler, scope ...any) HTMLVideo

	// OnError calls the given handler when an error occurs.
	OnError(h EventHandler, scope ...any) HTMLVideo

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLVideo

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLVideo

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLVideo

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLVideo

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLVideo

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLVideo

	// OnLoadStart calls the given handler just as the file begins to load before anything is actually loaded.
	OnLoadStart(h EventHandler, scope ...any) HTMLVideo

	// OnLoadedData calls the given handler when media data is loaded.
	OnLoadedData(h EventHandler, scope ...any) HTMLVideo

	// OnLoadedMetaData calls the given handler when meta data (like dimensions and duration) are loaded.
	OnLoadedMetaData(h EventHandler, scope ...any) HTMLVideo

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLVideo

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLVideo

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLVideo

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLVideo

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLVideo

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLVideo

	// OnPause calls the given handler when the media is paused either by the user or programmatically.
	OnPause(h EventHandler, scope ...any) HTMLVideo

	// OnPlay calls the given handler when the media is ready to start playing.
	OnPlay(h EventHandler, scope ...any) HTMLVideo

	// OnPlaying calls the given handler when the media actually has started playing.
	OnPlaying(h EventHandler, scope ...any) HTMLVideo

	// OnProgress calls the given handler when the browser is in the process of getting the media data.
	OnProgress(h EventHandler, scope ...any) HTMLVideo

	// OnRateChange calls the given handler each time the playback rate changes (like when a user switches to a slow motion or fast forward mode).
	OnRateChange(h EventHandler, scope ...any) HTMLVideo

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLVideo

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLVideo

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLVideo

	// OnSeeked calls the given handler when the seeking attribute is set to false indicating that seeking has ended.
	OnSeeked(h EventHandler, scope ...any) HTMLVideo

	// OnSeeking calls the given handler when the seeking attribute is set to true indicating that seeking is active.
	OnSeeking(h EventHandler, scope ...any) HTMLVideo

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLVideo

	// OnStalled calls the given handler when the browser is unable to fetch the media data for whatever reason.
	OnStalled(h EventHandler, scope ...any) HTMLVideo

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLVideo

	// OnSuspend calls the given handler when fetching the media data is stopped before it is completely loaded for whatever reason.
	OnSuspend(h EventHandler, scope ...any) HTMLVideo

	// OnTimeUpdate calls the given handler when the playing position has changed (like when the user fast forwards to a different point in the media).
	OnTimeUpdate(h EventHandler, scope ...any) HTMLVideo

	// OnVolumeChange calls the given handler each time the volume is changed which (includes setting the volume to "mute").
	OnVolumeChange(h EventHandler, scope ...any) HTMLVideo

	// OnWaiting calls the given handler when the media has paused but is expected to resume (like when the media pauses to buffer more data).
	OnWaiting(h EventHandler, scope ...any) HTMLVideo

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLVideo
}

// Video returns an HTML element that defines a video or movie.
func Video() HTMLVideo {
	return htmlElement[HTMLVideo]{
		tag:           "video",
		isSelfClosing: false,
	}
}

// HTMLWbr is the interface that describes a <wbr> HTML element.
type HTMLWbr interface {
	UI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v any) HTMLWbr

	// Body set the content of the element.
	Body(v ...UI) HTMLWbr

	// Attr sets the named attribute with the given value.
	Attr(k string, v any) HTMLWbr

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLWbr

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v any) HTMLWbr

	// Class specifies one or more classnames for an element (refers to a class in a style sheet).
	Class(v ...string) HTMLWbr

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLWbr

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v any) HTMLWbr

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLWbr

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLWbr

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLWbr

	// ID specifies a unique id for an element.
	ID(v string) HTMLWbr

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLWbr

	// Role specifies to parsing software the exact function of an element (and its children).
	Role(v string) HTMLWbr

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLWbr

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLWbr

	// Styles specifies CSS styles for an element. Can be called multiple times to set multiple css styles.
	Styles(s map[string]string) HTMLWbr

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLWbr

	// Title specifies extra information about an element.
	Title(v string) HTMLWbr

	// On calls the given event handler when the named event is triggered.
	On(event string, h EventHandler, scope ...any) HTMLWbr

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler, scope ...any) HTMLWbr

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler, scope ...any) HTMLWbr

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler, scope ...any) HTMLWbr

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler, scope ...any) HTMLWbr

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler, scope ...any) HTMLWbr

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler, scope ...any) HTMLWbr

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler, scope ...any) HTMLWbr

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler, scope ...any) HTMLWbr

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler, scope ...any) HTMLWbr

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler, scope ...any) HTMLWbr

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler, scope ...any) HTMLWbr

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler, scope ...any) HTMLWbr

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler, scope ...any) HTMLWbr

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler, scope ...any) HTMLWbr

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler, scope ...any) HTMLWbr

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler, scope ...any) HTMLWbr

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler, scope ...any) HTMLWbr

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler, scope ...any) HTMLWbr

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler, scope ...any) HTMLWbr

	// OnKeyUp calls the given handler when a user releases a key.
	OnKeyUp(h EventHandler, scope ...any) HTMLWbr

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler, scope ...any) HTMLWbr

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler, scope ...any) HTMLWbr

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler, scope ...any) HTMLWbr

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler, scope ...any) HTMLWbr

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler, scope ...any) HTMLWbr

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler, scope ...any) HTMLWbr

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler, scope ...any) HTMLWbr

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler, scope ...any) HTMLWbr

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler, scope ...any) HTMLWbr

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler, scope ...any) HTMLWbr

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler, scope ...any) HTMLWbr

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler, scope ...any) HTMLWbr
}

// Wbr returns an HTML element that defines a possible line-break.
func Wbr() HTMLWbr {
	return htmlElement[HTMLWbr]{
		tag:           "wbr",
		isSelfClosing: false,
	}
}

func (e htmlElement[T]) Abbr(v string) T {
	return e.Attr("abbr", v)
}

func (e htmlElement[T]) Accept(v string) T {
	return e.Attr("accept", v)
}

func (e htmlElement[T]) AcceptCharset(v string) T {
	return e.Attr("acceptcharset", v)
}

func (e htmlElement[T]) AccessKey(v string) T {
	return e.Attr("accesskey", v)
}

func (e htmlElement[T]) Action(v string) T {
	return e.Attr("action", v)
}

func (e htmlElement[T]) Allow(v string) T {
	return e.Attr("allow", v)
}

func (e htmlElement[T]) AllowFullscreen(v bool) T {
	s := "false"
	if v {
		s = "true"
	}
	return e.Attr("allowfullscreen", s)
}

func (e htmlElement[T]) AllowPaymentRequest(v bool) T {
	s := "false"
	if v {
		s = "true"
	}
	return e.Attr("allowpaymentrequest", s)
}

func (e htmlElement[T]) Alt(v string) T {
	return e.Attr("alt", v)
}

func (e htmlElement[T]) Aria(k string, v any) T {
	return e.Attr("aria-"+k, fmt.Sprintf("%v", v))
}

func (e htmlElement[T]) Async(v bool) T {
	return e.Attr("async", v)
}

func (e htmlElement[T]) AutoComplete(v bool) T {
	s := "off"
	if v {
		s = "on"
	}
	return e.Attr("autocomplete", s)
}

func (e htmlElement[T]) AutoFocus(v bool) T {
	return e.Attr("autofocus", v)
}

func (e htmlElement[T]) AutoPlay(v bool) T {
	return e.Attr("autoplay", v)
}

func (e htmlElement[T]) Capture(v string) T {
	return e.Attr("capture", v)
}

func (e htmlElement[T]) Charset(v string) T {
	return e.Attr("charset", v)
}

func (e htmlElement[T]) Checked(v bool) T {
	return e.Attr("checked", v)
}

func (e htmlElement[T]) Cite(v string) T {
	return e.Attr("cite", v)
}

func (e htmlElement[T]) Class(v ...string) T {
	return e.Attr("class", strings.Join(v, " "))
}

func (e htmlElement[T]) ColSpan(v int) T {
	return e.Attr("colspan", v)
}

func (e htmlElement[T]) Cols(v int) T {
	return e.Attr("cols", v)
}

func (e htmlElement[T]) Content(v string) T {
	return e.Attr("content", v)
}

func (e htmlElement[T]) ContentEditable(v bool) T {
	return e.Attr("contenteditable", v)
}

func (e htmlElement[T]) Controls(v bool) T {
	return e.Attr("controls", v)
}

func (e htmlElement[T]) Coords(v string) T {
	return e.Attr("coords", v)
}

func (e htmlElement[T]) CrossOrigin(v string) T {
	return e.Attr("crossorigin", v)
}

func (e htmlElement[T]) Data(v string) T {
	return e.Attr("data", v)
}

func (e htmlElement[T]) DataSet(k string, v any) T {
	return e.Attr("data-"+k, fmt.Sprintf("%v", v))
}

func (e htmlElement[T]) DateTime(v string) T {
	return e.Attr("datetime", v)
}

func (e htmlElement[T]) Default(v bool) T {
	return e.Attr("default", v)
}

func (e htmlElement[T]) Defer(v bool) T {
	return e.Attr("defer", v)
}

func (e htmlElement[T]) Dir(v string) T {
	return e.Attr("dir", v)
}

func (e htmlElement[T]) DirName(v string) T {
	return e.Attr("dirname", v)
}

func (e htmlElement[T]) Disabled(v bool) T {
	return e.Attr("disabled", v)
}

func (e htmlElement[T]) Download(v string) T {
	return e.Attr("download", v)
}

func (e htmlElement[T]) Draggable(v bool) T {
	return e.Attr("draggable", v)
}

func (e htmlElement[T]) EncType(v string) T {
	return e.Attr("enctype", v)
}

func (e htmlElement[T]) For(v string) T {
	return e.Attr("for", v)
}

func (e htmlElement[T]) Form(v string) T {
	return e.Attr("form", v)
}

func (e htmlElement[T]) FormAction(v string) T {
	return e.Attr("formaction", v)
}

func (e htmlElement[T]) FormEncType(v string) T {
	return e.Attr("formenctype", v)
}

func (e htmlElement[T]) FormMethod(v string) T {
	return e.Attr("formmethod", v)
}

func (e htmlElement[T]) FormNoValidate(v bool) T {
	return e.Attr("formnovalidate", v)
}

func (e htmlElement[T]) FormTarget(v string) T {
	return e.Attr("formtarget", v)
}

func (e htmlElement[T]) HTTPEquiv(v string) T {
	return e.Attr("httpequiv", v)
}

func (e htmlElement[T]) Headers(v string) T {
	return e.Attr("headers", v)
}

func (e htmlElement[T]) Height(v int) T {
	return e.Attr("height", v)
}

func (e htmlElement[T]) Hidden(v bool) T {
	return e.Attr("hidden", v)
}

func (e htmlElement[T]) High(v float64) T {
	return e.Attr("high", v)
}

func (e htmlElement[T]) Href(v string) T {
	return e.Attr("href", v)
}

func (e htmlElement[T]) HrefLang(v string) T {
	return e.Attr("hreflang", v)
}

func (e htmlElement[T]) ID(v string) T {
	return e.Attr("id", v)
}

func (e htmlElement[T]) IsMap(v bool) T {
	return e.Attr("ismap", v)
}

func (e htmlElement[T]) Kind(v string) T {
	return e.Attr("kind", v)
}

func (e htmlElement[T]) Label(v string) T {
	return e.Attr("label", v)
}

func (e htmlElement[T]) Lang(v string) T {
	return e.Attr("lang", v)
}

func (e htmlElement[T]) List(v string) T {
	return e.Attr("list", v)
}

func (e htmlElement[T]) Loading(v string) T {
	return e.Attr("loading", v)
}

func (e htmlElement[T]) Loop(v bool) T {
	return e.Attr("loop", v)
}

func (e htmlElement[T]) Low(v float64) T {
	return e.Attr("low", v)
}

func (e htmlElement[T]) Max(v any) T {
	return e.Attr("max", v)
}

func (e htmlElement[T]) MaxLength(v int) T {
	return e.Attr("maxlength", v)
}

func (e htmlElement[T]) Media(v string) T {
	return e.Attr("media", v)
}

func (e htmlElement[T]) Method(v string) T {
	return e.Attr("method", v)
}

func (e htmlElement[T]) Min(v any) T {
	return e.Attr("min", v)
}

func (e htmlElement[T]) Multiple(v bool) T {
	return e.Attr("multiple", v)
}

func (e htmlElement[T]) Muted(v bool) T {
	return e.Attr("muted", v)
}

func (e htmlElement[T]) Name(v string) T {
	return e.Attr("name", v)
}

func (e htmlElement[T]) NoValidate(v bool) T {
	return e.Attr("novalidate", v)
}

func (e htmlElement[T]) Open(v bool) T {
	return e.Attr("open", v)
}

func (e htmlElement[T]) Optimum(v float64) T {
	return e.Attr("optimum", v)
}

func (e htmlElement[T]) Pattern(v string) T {
	return e.Attr("pattern", v)
}

func (e htmlElement[T]) Ping(v string) T {
	return e.Attr("ping", v)
}

func (e htmlElement[T]) Placeholder(v string) T {
	return e.Attr("placeholder", v)
}

func (e htmlElement[T]) Poster(v string) T {
	return e.Attr("poster", v)
}

func (e htmlElement[T]) Preload(v string) T {
	return e.Attr("preload", v)
}

func (e htmlElement[T]) Property(v string) T {
	return e.Attr("property", v)
}

func (e htmlElement[T]) ReadOnly(v bool) T {
	return e.Attr("readonly", v)
}

func (e htmlElement[T]) ReferrerPolicy(v string) T {
	return e.Attr("referrerpolicy", v)
}

func (e htmlElement[T]) Rel(v string) T {
	return e.Attr("rel", v)
}

func (e htmlElement[T]) Required(v bool) T {
	return e.Attr("required", v)
}

func (e htmlElement[T]) Reversed(v bool) T {
	return e.Attr("reversed", v)
}

func (e htmlElement[T]) Role(v string) T {
	return e.Attr("role", v)
}

func (e htmlElement[T]) Rows(v int) T {
	return e.Attr("rows", v)
}

func (e htmlElement[T]) Rowspan(v int) T {
	return e.Attr("rowspan", v)
}

func (e htmlElement[T]) Sandbox(v any) T {
	return e.Attr("sandbox", v)
}

func (e htmlElement[T]) Scope(v string) T {
	return e.Attr("scope", v)
}

func (e htmlElement[T]) Selected(v bool) T {
	return e.Attr("selected", v)
}

func (e htmlElement[T]) Shape(v string) T {
	return e.Attr("shape", v)
}

func (e htmlElement[T]) Size(v int) T {
	return e.Attr("size", v)
}

func (e htmlElement[T]) Sizes(v string) T {
	return e.Attr("sizes", v)
}

func (e htmlElement[T]) Span(v int) T {
	return e.Attr("span", v)
}

func (e htmlElement[T]) Spellcheck(v bool) T {
	s := "false"
	if v {
		s = "true"
	}
	return e.Attr("spellcheck", s)
}

func (e htmlElement[T]) Src(v string) T {
	return e.Attr("src", v)
}

func (e htmlElement[T]) SrcDoc(v string) T {
	return e.Attr("srcdoc", v)
}

func (e htmlElement[T]) SrcLang(v string) T {
	return e.Attr("srclang", v)
}

func (e htmlElement[T]) SrcSet(v string) T {
	return e.Attr("srcset", v)
}

func (e htmlElement[T]) Start(v int) T {
	return e.Attr("start", v)
}

func (e htmlElement[T]) Step(v float64) T {
	return e.Attr("step", v)
}

func (e htmlElement[T]) Style(k, v string) T {
	var b strings.Builder
	b.WriteString(k)
	b.WriteByte(':')
	b.WriteString(v)
	return e.Attr("style", strings.Trim(b.String(), ";"))
}

func (e htmlElement[T]) Styles(s map[string]string) T {
	var b strings.Builder
	for k, v := range s {
		b.WriteString(k)
		b.WriteByte(':')
		b.WriteString(v)
		b.WriteByte(';')
	}
	return e.Attr("style", strings.Trim(b.String(), ";"))
}

func (e htmlElement[T]) TabIndex(v int) T {
	return e.Attr("tabindex", v)
}

func (e htmlElement[T]) Target(v string) T {
	return e.Attr("target", v)
}

func (e htmlElement[T]) Title(v string) T {
	return e.Attr("title", v)
}

func (e htmlElement[T]) Type(v string) T {
	return e.Attr("type", v)
}

func (e htmlElement[T]) UseMap(v string) T {
	return e.Attr("usemap", v)
}

func (e htmlElement[T]) Value(v any) T {
	return e.Attr("value", v)
}

func (e htmlElement[T]) Width(v int) T {
	return e.Attr("width", v)
}

func (e htmlElement[T]) Wrap(v string) T {
	return e.Attr("wrap", v)
}

func (e htmlElement[T]) OnAbort(h EventHandler, scope ...any) T {
	return e.On("abort", h, scope...)
}

func (e htmlElement[T]) OnAfterPrint(h EventHandler, scope ...any) T {
	return e.On("afterprint", h, scope...)
}

func (e htmlElement[T]) OnBeforePrint(h EventHandler, scope ...any) T {
	return e.On("beforeprint", h, scope...)
}

func (e htmlElement[T]) OnBeforeUnload(h EventHandler, scope ...any) T {
	return e.On("beforeunload", h, scope...)
}

func (e htmlElement[T]) OnBlur(h EventHandler, scope ...any) T {
	return e.On("blur", h, scope...)
}

func (e htmlElement[T]) OnCanPlay(h EventHandler, scope ...any) T {
	return e.On("canplay", h, scope...)
}

func (e htmlElement[T]) OnCanPlayThrough(h EventHandler, scope ...any) T {
	return e.On("canplaythrough", h, scope...)
}

func (e htmlElement[T]) OnChange(h EventHandler, scope ...any) T {
	return e.On("change", h, scope...)
}

func (e htmlElement[T]) OnClick(h EventHandler, scope ...any) T {
	return e.On("click", h, scope...)
}

func (e htmlElement[T]) OnContextMenu(h EventHandler, scope ...any) T {
	return e.On("contextmenu", h, scope...)
}

func (e htmlElement[T]) OnCopy(h EventHandler, scope ...any) T {
	return e.On("copy", h, scope...)
}

func (e htmlElement[T]) OnCueChange(h EventHandler, scope ...any) T {
	return e.On("cuechange", h, scope...)
}

func (e htmlElement[T]) OnCut(h EventHandler, scope ...any) T {
	return e.On("cut", h, scope...)
}

func (e htmlElement[T]) OnDblClick(h EventHandler, scope ...any) T {
	return e.On("dblclick", h, scope...)
}

func (e htmlElement[T]) OnDrag(h EventHandler, scope ...any) T {
	return e.On("drag", h, scope...)
}

func (e htmlElement[T]) OnDragEnd(h EventHandler, scope ...any) T {
	return e.On("dragend", h, scope...)
}

func (e htmlElement[T]) OnDragEnter(h EventHandler, scope ...any) T {
	return e.On("dragenter", h, scope...)
}

func (e htmlElement[T]) OnDragLeave(h EventHandler, scope ...any) T {
	return e.On("dragleave", h, scope...)
}

func (e htmlElement[T]) OnDragOver(h EventHandler, scope ...any) T {
	return e.On("dragover", h, scope...)
}

func (e htmlElement[T]) OnDragStart(h EventHandler, scope ...any) T {
	return e.On("dragstart", h, scope...)
}

func (e htmlElement[T]) OnDrop(h EventHandler, scope ...any) T {
	return e.On("drop", h, scope...)
}

func (e htmlElement[T]) OnDurationChange(h EventHandler, scope ...any) T {
	return e.On("durationchange", h, scope...)
}

func (e htmlElement[T]) OnEmptied(h EventHandler, scope ...any) T {
	return e.On("emptied", h, scope...)
}

func (e htmlElement[T]) OnEnded(h EventHandler, scope ...any) T {
	return e.On("ended", h, scope...)
}

func (e htmlElement[T]) OnError(h EventHandler, scope ...any) T {
	return e.On("error", h, scope...)
}

func (e htmlElement[T]) OnFocus(h EventHandler, scope ...any) T {
	return e.On("focus", h, scope...)
}

func (e htmlElement[T]) OnHashChange(h EventHandler, scope ...any) T {
	return e.On("hashchange", h, scope...)
}

func (e htmlElement[T]) OnInput(h EventHandler, scope ...any) T {
	return e.On("input", h, scope...)
}

func (e htmlElement[T]) OnInvalid(h EventHandler, scope ...any) T {
	return e.On("invalid", h, scope...)
}

func (e htmlElement[T]) OnKeyDown(h EventHandler, scope ...any) T {
	return e.On("keydown", h, scope...)
}

func (e htmlElement[T]) OnKeyPress(h EventHandler, scope ...any) T {
	return e.On("keypress", h, scope...)
}

func (e htmlElement[T]) OnKeyUp(h EventHandler, scope ...any) T {
	return e.On("keyup", h, scope...)
}

func (e htmlElement[T]) OnLoad(h EventHandler, scope ...any) T {
	return e.On("load", h, scope...)
}

func (e htmlElement[T]) OnLoadStart(h EventHandler, scope ...any) T {
	return e.On("loadstart", h, scope...)
}

func (e htmlElement[T]) OnLoadedData(h EventHandler, scope ...any) T {
	return e.On("loadeddata", h, scope...)
}

func (e htmlElement[T]) OnLoadedMetaData(h EventHandler, scope ...any) T {
	return e.On("loadedmetadata", h, scope...)
}

func (e htmlElement[T]) OnMessage(h EventHandler, scope ...any) T {
	return e.On("message", h, scope...)
}

func (e htmlElement[T]) OnMouseDown(h EventHandler, scope ...any) T {
	return e.On("mousedown", h, scope...)
}

func (e htmlElement[T]) OnMouseMove(h EventHandler, scope ...any) T {
	return e.On("mousemove", h, scope...)
}

func (e htmlElement[T]) OnMouseOut(h EventHandler, scope ...any) T {
	return e.On("mouseout", h, scope...)
}

func (e htmlElement[T]) OnMouseOver(h EventHandler, scope ...any) T {
	return e.On("mouseover", h, scope...)
}

func (e htmlElement[T]) OnMouseUp(h EventHandler, scope ...any) T {
	return e.On("mouseup", h, scope...)
}

func (e htmlElement[T]) OnOffline(h EventHandler, scope ...any) T {
	return e.On("offline", h, scope...)
}

func (e htmlElement[T]) OnOnline(h EventHandler, scope ...any) T {
	return e.On("online", h, scope...)
}

func (e htmlElement[T]) OnPageHide(h EventHandler, scope ...any) T {
	return e.On("pagehide", h, scope...)
}

func (e htmlElement[T]) OnPageShow(h EventHandler, scope ...any) T {
	return e.On("pageshow", h, scope...)
}

func (e htmlElement[T]) OnPaste(h EventHandler, scope ...any) T {
	return e.On("paste", h, scope...)
}

func (e htmlElement[T]) OnPause(h EventHandler, scope ...any) T {
	return e.On("pause", h, scope...)
}

func (e htmlElement[T]) OnPlay(h EventHandler, scope ...any) T {
	return e.On("play", h, scope...)
}

func (e htmlElement[T]) OnPlaying(h EventHandler, scope ...any) T {
	return e.On("playing", h, scope...)
}

func (e htmlElement[T]) OnPopState(h EventHandler, scope ...any) T {
	return e.On("popstate", h, scope...)
}

func (e htmlElement[T]) OnProgress(h EventHandler, scope ...any) T {
	return e.On("progress", h, scope...)
}

func (e htmlElement[T]) OnRateChange(h EventHandler, scope ...any) T {
	return e.On("ratechange", h, scope...)
}

func (e htmlElement[T]) OnReset(h EventHandler, scope ...any) T {
	return e.On("reset", h, scope...)
}

func (e htmlElement[T]) OnResize(h EventHandler, scope ...any) T {
	return e.On("resize", h, scope...)
}

func (e htmlElement[T]) OnScroll(h EventHandler, scope ...any) T {
	return e.On("scroll", h, scope...)
}

func (e htmlElement[T]) OnSearch(h EventHandler, scope ...any) T {
	return e.On("search", h, scope...)
}

func (e htmlElement[T]) OnSeeked(h EventHandler, scope ...any) T {
	return e.On("seeked", h, scope...)
}

func (e htmlElement[T]) OnSeeking(h EventHandler, scope ...any) T {
	return e.On("seeking", h, scope...)
}

func (e htmlElement[T]) OnSelect(h EventHandler, scope ...any) T {
	return e.On("select", h, scope...)
}

func (e htmlElement[T]) OnStalled(h EventHandler, scope ...any) T {
	return e.On("stalled", h, scope...)
}

func (e htmlElement[T]) OnStorage(h EventHandler, scope ...any) T {
	return e.On("storage", h, scope...)
}

func (e htmlElement[T]) OnSubmit(h EventHandler, scope ...any) T {
	return e.On("submit", h, scope...)
}

func (e htmlElement[T]) OnSuspend(h EventHandler, scope ...any) T {
	return e.On("suspend", h, scope...)
}

func (e htmlElement[T]) OnTimeUpdate(h EventHandler, scope ...any) T {
	return e.On("timeupdate", h, scope...)
}

func (e htmlElement[T]) OnToggle(h EventHandler, scope ...any) T {
	return e.On("toggle", h, scope...)
}

func (e htmlElement[T]) OnUnload(h EventHandler, scope ...any) T {
	return e.On("unload", h, scope...)
}

func (e htmlElement[T]) OnVolumeChange(h EventHandler, scope ...any) T {
	return e.On("volumechange", h, scope...)
}

func (e htmlElement[T]) OnWaiting(h EventHandler, scope ...any) T {
	return e.On("waiting", h, scope...)
}

func (e htmlElement[T]) OnWheel(h EventHandler, scope ...any) T {
	return e.On("wheel", h, scope...)
}
